"""
–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å –ø–æ–ª–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∏—Å—Ç–µ–∫—à–∏—Ö –∫–æ–¥–æ–≤ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å–æ–æ–±—â–µ–Ω–∏–π
"""
import asyncio
import logging
from aiogram import Bot

from database import db
from utils.date_utils import get_moscow_time

logger = logging.getLogger(__name__)


async def check_expired_codes(bot: Bot):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –∫–æ–¥–æ–≤ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        moscow_now = get_moscow_time()
        logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –∫–æ–¥–æ–≤: {moscow_now.strftime('%d.%m.%Y %H:%M:%S')}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥—ã –∫ –∏—Å—Ç–µ—á–µ–Ω–∏—é
        codes_to_expire = await db.get_codes_to_expire()
        
        if not codes_to_expire:
            logger.debug("‚úÖ –ò—Å—Ç–µ–∫—à–∏—Ö –∫–æ–¥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        
        logger.info(f"‚è∞ –ù–∞–π–¥–µ–Ω–æ –∏—Å—Ç–µ–∫—à–∏—Ö –∫–æ–¥–æ–≤: {len(codes_to_expire)}")
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
        from utils.broadcast import update_expired_code_messages
        
        for code in codes_to_expire:
            try:
                logger.info(f"üóëÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏—Å—Ç–µ–∫—à–∏–π –∫–æ–¥: {code.code}")
                
                # 1. –°–ù–ê–ß–ê–õ–ê –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —ç—Ç–∏–º –∫–æ–¥–æ–º
                await update_expired_code_messages(bot, code.code)
                
                # 2. –ü–û–¢–û–ú —É–¥–∞–ª—è–µ–º –∫–æ–¥ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                success = await db.expire_code_by_id(code.id)
                
                if success:
                    logger.info(f"‚úÖ –ö–æ–¥ {code.code} —É—Å–ø–µ—à–Ω–æ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
                else:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ {code.code}")
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∫–æ–¥–æ–≤
                await asyncio.sleep(1)
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–¥–∞ {code.code}: {e}")
                
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏—Å—Ç–µ–∫—à–∏—Ö –∫–æ–¥–æ–≤: {e}")


async def start_scheduler(bot: Bot):
    """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á"""
    moscow_time = get_moscow_time()
    logger.info(f"üöÄ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω: {moscow_time.strftime('%d.%m.%Y %H:%M:%S')}")
    
    while True:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–µ–∫—à–∏–µ –∫–æ–¥—ã –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
            await check_expired_codes(bot)
            await asyncio.sleep(300)  # 5 –º–∏–Ω—É—Ç
            
        except Exception as e:
            logger.error(f"üí• –û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ: {e}")
            await asyncio.sleep(60)  # –ü—Ä–∏ –æ—à–∏–±–∫–µ –∂–¥–µ–º 1 –º–∏–Ω—É—Ç—É


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
async def manual_check_expired_codes(bot: Bot):
    """–†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –∫–æ–¥–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
    logger.info("üîß –†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –∫–æ–¥–æ–≤...")
    await check_expired_codes(bot)