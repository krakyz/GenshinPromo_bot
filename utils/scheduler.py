# –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –î–õ–Ø utils/scheduler.py
# –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è

"""
–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ü–õ–ê–ù–ò–†–û–í–©–ò–ö –° –û–ë–ù–û–í–õ–ï–ù–ò–ï–ú –°–û–û–ë–©–ï–ù–ò–ô
"""

import asyncio
import logging
from typing import Optional
from aiogram import Bot
from database import db
from utils.date_utils import get_moscow_time

logger = logging.getLogger(__name__)

class SchedulerService:
    """–°–µ—Ä–≤–∏—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å–æ–æ–±—â–µ–Ω–∏–π"""
    
    def __init__(self, bot: Bot, check_interval: int = 300):
        self.bot = bot
        self.check_interval = check_interval  # 5 –º–∏–Ω—É—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.is_running = False
        self.task: Optional[asyncio.Task] = None
    
    async def check_expired_codes(self) -> int:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏—Å—Ç–µ–∫—à–∏–µ –∫–æ–¥—ã —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å–æ–æ–±—â–µ–Ω–∏–π
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∫–æ–¥–æ–≤
        """
        try:
            moscow_now = get_moscow_time()
            logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –∫–æ–¥–æ–≤: {moscow_now.strftime('%d.%m.%Y %H:%M:%S')}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥—ã –∫ –∏—Å—Ç–µ—á–µ–Ω–∏—é
            codes_to_expire = await db.get_codes_to_expire()
            
            if not codes_to_expire:
                logger.debug("‚úÖ –ò—Å—Ç–µ–∫—à–∏—Ö –∫–æ–¥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return 0
            
            logger.info(f"‚è∞ –ù–∞–π–¥–µ–Ω–æ –∏—Å—Ç–µ–∫—à–∏—Ö –∫–æ–¥–æ–≤: {len(codes_to_expire)}")
            
            expired_count = 0
            for code in codes_to_expire:
                try:
                    logger.info(f"üóëÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏—Å—Ç–µ–∫—à–∏–π –∫–æ–¥: {code.code}")
                    
                    # 1. –°–ù–ê–ß–ê–õ–ê –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —ç—Ç–∏–º –∫–æ–¥–æ–º
                    from utils.broadcast import update_expired_code_messages
                    await update_expired_code_messages(self.bot, code.code)
                    
                    # 2. –ü–û–¢–û–ú —É–¥–∞–ª—è–µ–º –∫–æ–¥ –∏–∑ –ë–î
                    success = await db.expire_code_by_id(code.id)
                    
                    if success:
                        logger.info(f"‚úÖ –ö–æ–¥ {code.code} —É—Å–ø–µ—à–Ω–æ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
                        expired_count += 1
                    else:
                        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ {code.code}")
                    
                    # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∫–æ–¥–æ–≤
                    await asyncio.sleep(2)
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–¥–∞ {code.code}: {e}")
                    continue
            
            if expired_count > 0:
                logger.info(f"üéØ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏—Å—Ç–µ–∫—à–∏—Ö –∫–æ–¥–æ–≤: {expired_count}")
            
            return expired_count
            
        except Exception as e:
            logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏—Å—Ç–µ–∫—à–∏—Ö –∫–æ–¥–æ–≤: {e}")
            return 0
    
    async def cleanup_old_message_records(self) -> int:
        """
        –û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏–π (—Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π)
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∏—â–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
        """
        try:
            logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π —Å–æ–æ–±—â–µ–Ω–∏–π...")
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
            async with aiosqlite.connect(db.db_path) as conn:
                cursor = await conn.execute("""
                    SELECT COUNT(*) FROM code_messages 
                    WHERE created_at < datetime('now', '-30 days')
                """)
                old_count = (await cursor.fetchone())[0]
                
                if old_count == 0:
                    logger.debug("–°—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                    return 0
                
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
                await conn.execute("""
                    DELETE FROM code_messages 
                    WHERE created_at < datetime('now', '-30 days')
                """)
                await conn.commit()
                
                logger.info(f"üóëÔ∏è –û—á–∏—â–µ–Ω–æ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π —Å–æ–æ–±—â–µ–Ω–∏–π: {old_count}")
                return old_count
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π: {e}")
            return 0
    
    async def run_scheduler_cycle(self):
        """–û–¥–∏–Ω —Ü–∏–∫–ª –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Å –ø–æ–ª–Ω—ã–º –Ω–∞–±–æ—Ä–æ–º –∑–∞–¥–∞—á"""
        try:
            moscow_time = get_moscow_time()
            logger.debug(f"üîÑ –¶–∏–∫–ª –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {moscow_time.strftime('%d.%m.%Y %H:%M:%S')}")
            
            # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Å—Ç–µ–∫—à–∏–µ –∫–æ–¥—ã
            expired_count = await self.check_expired_codes()
            
            # 2. –ö–∞–∂–¥—ã–π —á–∞—Å –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ (–ø—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω—É—Ç—ã)
            if moscow_time.minute == 0:
                await self.cleanup_old_message_records()
            
            # 3. –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏
            # await self.send_daily_stats()
            # await self.backup_database()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
        if self.is_running:
            logger.warning("‚ö†Ô∏è –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return
        
        self.is_running = True
        moscow_time = get_moscow_time()
        logger.info(f"üöÄ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω: {moscow_time.strftime('%d.%m.%Y %H:%M:%S')}")
        logger.info(f"‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {self.check_interval} —Å–µ–∫—É–Ω–¥")
        
        while self.is_running:
            try:
                await self.run_scheduler_cycle()
                await asyncio.sleep(self.check_interval)
                
            except asyncio.CancelledError:
                logger.info("‚èπÔ∏è –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ –∑–∞–ø—Ä–æ—Å—É")
                break
                
            except Exception as e:
                logger.error(f"üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
                await asyncio.sleep(60)  # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞...")
        self.is_running = False
        
        if self.task and not self.task.done():
            self.task.cancel()

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
async def check_expired_codes(bot: Bot):
    """
    –£—Å—Ç–∞—Ä–µ–≤—à–∞—è —Ñ—É–Ω–∫—Ü–∏—è - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å SchedulerService
    """
    scheduler = SchedulerService(bot)
    return await scheduler.check_expired_codes()

async def start_scheduler(bot: Bot):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å–æ–æ–±—â–µ–Ω–∏–π
    """
    scheduler = SchedulerService(bot, check_interval=300)  # 5 –º–∏–Ω—É—Ç
    
    try:
        logger.info("üéØ –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Å —Å–∏—Å—Ç–µ–º–æ–π –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π")
        await scheduler.start()
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
    finally:
        scheduler.stop()

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async def run_manual_cleanup(bot: Bot):
    """–†—É—á–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.info("üîß –†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–µ–∫—à–∏—Ö –∫–æ–¥–æ–≤...")
    scheduler = SchedulerService(bot)
    count = await scheduler.check_expired_codes()
    logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–æ–¥–æ–≤: {count}")
    return count

async def test_message_update_system(bot: Bot):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π...")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–¥—ã
        codes = await db.get_active_codes()
        
        if not codes:
            logger.warning("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–¥–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return False
        
        test_results = []
        for code in codes[:3]:  # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–∞–∫—Å–∏–º—É–º 3 –∫–æ–¥–∞
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                messages = await db.get_code_messages_by_value(code.code)
                test_results.append({
                    'code': code.code,
                    'messages_count': len(messages),
                    'can_update': len(messages) > 0
                })
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞ {code.code}: {e}")
                test_results.append({
                    'code': code.code,
                    'messages_count': 0,
                    'can_update': False,
                    'error': str(e)
                })
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        logger.info("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:")
        for result in test_results:
            status = "‚úÖ" if result['can_update'] else "‚ö†Ô∏è"
            logger.info(f"  {status} {result['code']}: {result['messages_count']} —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        working_codes = len([r for r in test_results if r['can_update']])
        logger.info(f"üéØ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è {working_codes}/{len(test_results)} –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–¥–æ–≤")
        
        return working_codes > 0
        
    except Exception as e:
        logger.error(f"üí• –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã: {e}")
        return False

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
async def recover_scheduler(bot: Bot, max_retries: int = 3):
    """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø–æ—Å–ª–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫"""
    for attempt in range(max_retries):
        try:
            logger.info(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ #{attempt + 1}")
            await start_scheduler(bot)
            break
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–ø—ã—Ç–∫–∞ #{attempt + 1} –Ω–µ—É–¥–∞—á–Ω–∞: {e}")
            if attempt < max_retries - 1:
                await asyncio.sleep(60 * (attempt + 1))  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
            else:
                logger.error("üí• –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫")
                raise