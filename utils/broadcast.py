"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å–≤—è–∑–µ–π —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
"""
import asyncio
import logging
from typing import List, Dict, Any, Optional
from aiogram import Bot
from aiogram.exceptions import TelegramBadRequest, TelegramForbiddenError, TelegramRetryAfter

from database import db
from models import CodeModel, CodeMessageModel
from keyboards.inline import get_code_activation_keyboard, get_custom_post_keyboard, get_custom_post_with_button_keyboard
from utils.date_utils import format_expiry_date

logger = logging.getLogger(__name__)


class MessageTemplates:
    """–®–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    
    @staticmethod
    def new_code_message(code: CodeModel) -> str:
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –ø—Ä–æ–º–æ-–∫–æ–¥–µ"""
        text = f"""üéâ <b>–ù–æ–≤—ã–π –ø—Ä–æ–º–æ-–∫–æ–¥ Genshin Impact!</b>

üî• <b>–ö–æ–¥:</b> <code>{code.code}</code>

üíé <b>–ù–∞–≥—Ä–∞–¥—ã:</b> {code.rewards or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}

üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {code.description or '–ü—Ä–æ–º–æ-–∫–æ–¥ Genshin Impact'}"""
        
        if code.expires_date:
            text += f"\n\n‚è∞ <b>–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:</b> {format_expiry_date(code.expires_date)}"
        
        text += "\n\n<i>üí° –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏!</i>"
        return text
    
    @staticmethod
    def expired_code_message(code_value: str) -> str:
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∏—Å—Ç–µ–∫—à–µ–≥–æ –∫–æ–¥–∞"""
        return f"""‚ùå <b>–ü—Ä–æ–º–æ-–∫–æ–¥ –∏—Å—Ç–µ–∫</b>

–ö–æ–¥ <code>{code_value}</code> –±–æ–ª—å—à–µ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω.

üîî <i>–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤—ã–µ –∫–æ–¥—ã!</i>"""
    
    @staticmethod
    def custom_post_message(post_data: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç –∫–∞—Å—Ç–æ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        return f"{post_data['title']}\n\n{post_data['text']}"
    
    @staticmethod
    def broadcast_report(stats: Dict[str, int], total_subscribers: int) -> str:
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ —Ä–∞—Å—Å—ã–ª–∫–µ"""
        return f"""‚úÖ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {stats['sent']}
‚Ä¢ ‚ùå –û—à–∏–±–æ–∫: {stats['failed']}
‚Ä¢ üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: {stats['blocked']}
‚Ä¢ üë• –í—Å–µ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {total_subscribers}
‚Ä¢ üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {round(stats['sent']/total_subscribers*100, 1) if total_subscribers > 0 else 0}%"""


async def broadcast_new_code(bot: Bot, code: CodeModel) -> Dict[str, int]:
    """
    –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Ä–∞—Å—Å—ã–ª–∫–∞ –Ω–æ–≤–æ–≥–æ –∫–æ–¥–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å–≤—è–∑–µ–π —Å–æ–æ–±—â–µ–Ω–∏–π
    """
    logger.info(f"–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –Ω–æ–≤–æ–≥–æ –∫–æ–¥–∞: {code.code}")
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
    subscribers = await db.get_all_subscribers()
    if not subscribers:
        logger.warning("–ù–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
        return {"sent": 0, "failed": 0, "blocked": 0}
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    text = MessageTemplates.new_code_message(code)
    keyboard = get_code_activation_keyboard(code.code)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
    stats = {"sent": 0, "failed": 0, "blocked": 0}
    
    # –†–∞—Å—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å–≤—è–∑–µ–π
    for user_id in subscribers:
        try:
            message = await bot.send_message(
                chat_id=user_id,
                text=text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            
            # –ö–†–ò–¢–ò–ß–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑—å —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ–¥–æ–º
            await db.save_code_message(
                code_id=code.id,
                user_id=user_id,
                message_id=message.message_id
            )
            
            stats["sent"] += 1
            await asyncio.sleep(0.05)  # –ó–∞—â–∏—Ç–∞ –æ—Ç —Ñ–ª—É–¥-–ª–∏–º–∏—Ç–∞
            
        except TelegramForbiddenError:
            stats["blocked"] += 1
            logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞")
            
        except TelegramRetryAfter as e:
            logger.warning(f"–§–ª—É–¥-–ª–∏–º–∏—Ç: –∂–¥–µ–º {e.retry_after} —Å–µ–∫—É–Ω–¥")
            await asyncio.sleep(e.retry_after)
            # –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É
            try:
                message = await bot.send_message(
                    chat_id=user_id,
                    text=text,
                    reply_markup=keyboard,
                    parse_mode="HTML"
                )
                await db.save_code_message(
                    code_id=code.id,
                    user_id=user_id,
                    message_id=message.message_id
                )
                stats["sent"] += 1
            except:
                stats["failed"] += 1
                
        except Exception as e:
            stats["failed"] += 1
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    
    logger.info(f"–†–∞—Å—Å—ã–ª–∫–∞ –∫–æ–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {stats}")
    return stats


async def broadcast_custom_post(bot: Bot, post_data: Dict[str, Any], image_file_id: Optional[str], admin_id: int) -> Dict[str, int]:
    """
    –†–∞—Å—Å—ã–ª–∫–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø–æ—Å—Ç–∞
    """
    logger.info(f"–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –ø–æ—Å—Ç–∞: {post_data['title']}")
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
    subscribers = await db.get_all_subscribers()
    if not subscribers:
        logger.warning("–ù–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ—Å—Ç–∞")
        return {"sent": 0, "failed": 0, "blocked": 0}
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    text = MessageTemplates.custom_post_message(post_data)
    
    if post_data.get('button_text') and post_data.get('button_url'):
        keyboard = get_custom_post_with_button_keyboard(
            post_data['button_text'],
            post_data['button_url']
        )
    else:
        keyboard = get_custom_post_keyboard()
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
    stats = {"sent": 0, "failed": 0, "blocked": 0}
    
    # –†–∞—Å—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    for user_id in subscribers:
        try:
            if image_file_id:
                await bot.send_photo(
                    chat_id=user_id,
                    photo=image_file_id,
                    caption=text,
                    reply_markup=keyboard,
                    parse_mode="HTML"
                )
            else:
                await bot.send_message(
                    chat_id=user_id,
                    text=text,
                    reply_markup=keyboard,
                    parse_mode="HTML"
                )
            
            stats["sent"] += 1
            await asyncio.sleep(0.05)
            
        except TelegramForbiddenError:
            stats["blocked"] += 1
            logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞")
            
        except TelegramRetryAfter as e:
            logger.warning(f"–§–ª—É–¥-–ª–∏–º–∏—Ç: –∂–¥–µ–º {e.retry_after} —Å–µ–∫—É–Ω–¥")
            await asyncio.sleep(e.retry_after)
            # –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É
            try:
                if image_file_id:
                    await bot.send_photo(
                        chat_id=user_id,
                        photo=image_file_id,
                        caption=text,
                        reply_markup=keyboard,
                        parse_mode="HTML"
                    )
                else:
                    await bot.send_message(
                        chat_id=user_id,
                        text=text,
                        reply_markup=keyboard,
                        parse_mode="HTML"
                    )
                stats["sent"] += 1
            except:
                stats["failed"] += 1
                
        except Exception as e:
            stats["failed"] += 1
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –∞–¥–º–∏–Ω—É
    report_text = MessageTemplates.broadcast_report(stats, len(subscribers))
    try:
        await bot.send_message(chat_id=admin_id, text=report_text, parse_mode="HTML")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ –∞–¥–º–∏–Ω—É: {e}")
    
    logger.info(f"–†–∞—Å—Å—ã–ª–∫–∞ –ø–æ—Å—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {stats}")
    return stats


async def update_expired_code_messages(bot: Bot, code_value: str):
    """
    –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–∏ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –∫–æ–¥–∞
    """
    logger.info(f"–û–±–Ω–æ–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∏—Å—Ç–µ–∫—à–µ–≥–æ –∫–æ–¥–∞: {code_value}")
    
    try:
        # –ö–†–ò–¢–ò–ß–ù–û: –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —ç—Ç–∏–º –∫–æ–¥–æ–º –ü–ï–†–ï–î –µ–≥–æ —É–¥–∞–ª–µ–Ω–∏–µ–º
        messages = await db.get_code_messages_by_value(code_value)
        
        if not messages:
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–æ–¥–∞ {code_value} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        expired_text = MessageTemplates.expired_code_message(code_value)
        expired_keyboard = get_code_activation_keyboard(code_value, is_expired=True)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        updated_count = 0
        failed_count = 0
        
        for msg in messages:
            try:
                await bot.edit_message_text(
                    chat_id=msg.user_id,
                    message_id=msg.message_id,
                    text=expired_text,
                    reply_markup=expired_keyboard,
                    parse_mode="HTML"
                )
                updated_count += 1
                await asyncio.sleep(0.05)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏
                
            except (TelegramBadRequest, TelegramForbiddenError) as e:
                # –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏–ª–∏ –±–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
                failed_count += 1
                logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {msg.id}: {e}")
                continue
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è {msg.id}: {e}")
                failed_count += 1
        
        logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–¥–∞ {code_value} –∑–∞–≤–µ—Ä—à–µ–Ω–æ: –æ–±–Ω–æ–≤–ª–µ–Ω–æ {updated_count}, –æ—à–∏–±–æ–∫ {failed_count}")
        
        # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –æ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏)
        # await db.delete_code_messages_by_value(code_value)
        
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
        raise  # –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤—ã—à–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏