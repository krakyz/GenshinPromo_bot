"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∫–æ–¥–∞–º–∏
"""
import asyncio
import logging
from typing import List, Dict, Any, Optional
from aiogram import Bot
from aiogram.exceptions import TelegramBadRequest, TelegramForbiddenError, TelegramRetryAfter

from database import db
from models import CodeModel, CodeMessageModel
from keyboards.inline import get_code_activation_keyboard, get_custom_post_keyboard, get_custom_post_with_button_keyboard
from utils.date_utils import format_expiry_date

logger = logging.getLogger(__name__)


class BroadcastManager:
    """–£–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞—Å—Å—ã–ª–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å–≤—è–∑–µ–π"""
    
    def __init__(self, bot: Bot, max_concurrent: int = 10, delay: float = 0.05):
        self.bot = bot
        self.semaphore = asyncio.Semaphore(max_concurrent)
        self.delay = delay
        self.stats = {"sent": 0, "failed": 0, "blocked": 0}
        self.message_records = []  # –ó–∞–ø–∏—Å–∏ –æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
    
    async def send_message_safe(
        self,
        user_id: int,
        text: str = None,
        photo: str = None,
        reply_markup=None,
        parse_mode: str = "HTML"
    ) -> Optional[int]:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–¥–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º message_id"""
        async with self.semaphore:
            try:
                if photo:
                    message = await self.bot.send_photo(
                        chat_id=user_id,
                        photo=photo,
                        caption=text,
                        reply_markup=reply_markup,
                        parse_mode=parse_mode
                    )
                else:
                    message = await self.bot.send_message(
                        chat_id=user_id,
                        text=text,
                        reply_markup=reply_markup,
                        parse_mode=parse_mode
                    )
                
                self.stats["sent"] += 1
                await asyncio.sleep(self.delay)
                return message.message_id  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
                
            except TelegramForbiddenError:
                self.stats["blocked"] += 1
                logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞")
                return None
                
            except TelegramRetryAfter as e:
                logger.warning(f"–§–ª—É–¥-–ª–∏–º–∏—Ç: –∂–¥–µ–º {e.retry_after} —Å–µ–∫—É–Ω–¥")
                await asyncio.sleep(e.retry_after)
                return await self.send_message_safe(user_id, text, photo, reply_markup, parse_mode)
                
            except Exception as e:
                self.stats["failed"] += 1
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                return None
    
    async def broadcast_with_tracking(
        self,
        user_ids: List[int],
        text: str = None,
        photo: str = None,
        reply_markup=None,
        code_id: Optional[int] = None
    ) -> Dict[str, int]:
        """–†–∞—Å—Å—ã–ª–∫–∞ —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –±—É–¥—É—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
        self.stats = {"sent": 0, "failed": 0, "blocked": 0}
        self.message_records = []
        
        tasks = [
            self._send_and_record(user_id, text, photo, reply_markup, code_id)
            for user_id in user_ids
        ]
        
        await asyncio.gather(*tasks, return_exceptions=True)
        
        # –ú–∞—Å—Å–æ–≤–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –æ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        if self.message_records and code_id:
            try:
                await db.save_message_batch(self.message_records)
                logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(self.message_records)} –∑–∞–ø–∏—Å–µ–π –æ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
        
        return self.stats.copy()
    
    async def _send_and_record(self, user_id: int, text: str, photo: str, reply_markup, code_id: Optional[int]):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –Ω–µ–º"""
        message_id = await self.send_message_safe(user_id, text, photo, reply_markup)
        
        if message_id and code_id:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è –±—É–¥—É—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            self.message_records.append({
                'code_id': code_id,
                'user_id': user_id,
                'message_id': message_id,
                'is_active': True
            })


class MessageTemplates:
    """–®–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    
    @staticmethod
    def new_code_message(code: CodeModel) -> str:
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –ø—Ä–æ–º–æ-–∫–æ–¥–µ"""
        text = f"""üéâ <b>–ù–æ–≤—ã–π –ø—Ä–æ–º–æ-–∫–æ–¥ Genshin Impact!</b>

üî• <b>–ö–æ–¥:</b> <code>{code.code}</code>

üíé <b>–ù–∞–≥—Ä–∞–¥—ã:</b> {code.rewards or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}

üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {code.description or '–ü—Ä–æ–º–æ-–∫–æ–¥ Genshin Impact'}"""
        
        if code.expires_date:
            text += f"\n\n‚è∞ <b>–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:</b> {format_expiry_date(code.expires_date)}"
        
        text += "\n\n<i>üí° –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏!</i>"
        return text
    
    @staticmethod
    def expired_code_message(code_value: str) -> str:
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∏—Å—Ç–µ–∫—à–µ–≥–æ –∫–æ–¥–∞"""
        return f"""‚ùå <b>–ü—Ä–æ–º–æ-–∫–æ–¥ –∏—Å—Ç–µ–∫</b>

–ö–æ–¥ <code>{code_value}</code> –±–æ–ª—å—à–µ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω.

üîî <i>–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤—ã–µ –∫–æ–¥—ã!</i>"""
    
    @staticmethod
    def custom_post_message(post_data: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç –∫–∞—Å—Ç–æ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        return f"{post_data['title']}\n\n{post_data['text']}"
    
    @staticmethod
    def broadcast_report(stats: Dict[str, int], total_subscribers: int) -> str:
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ —Ä–∞—Å—Å—ã–ª–∫–µ"""
        return f"""‚úÖ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {stats['sent']}
‚Ä¢ ‚ùå –û—à–∏–±–æ–∫: {stats['failed']}
‚Ä¢ üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: {stats['blocked']}
‚Ä¢ üë• –í—Å–µ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {total_subscribers}
‚Ä¢ üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {round(stats['sent']/total_subscribers*100, 1) if total_subscribers > 0 else 0}%"""


async def broadcast_new_code(bot: Bot, code: CodeModel) -> Dict[str, int]:
    """–†–∞—Å—Å—ã–ª–∫–∞ –Ω–æ–≤–æ–≥–æ –∫–æ–¥–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å–≤—è–∑–µ–π —Å–æ–æ–±—â–µ–Ω–∏–π"""
    logger.info(f"–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –Ω–æ–≤–æ–≥–æ –∫–æ–¥–∞: {code.code}")
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
    subscribers = await db.get_all_subscribers()
    if not subscribers:
        logger.warning("–ù–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
        return {"sent": 0, "failed": 0, "blocked": 0}
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    text = MessageTemplates.new_code_message(code)
    keyboard = get_code_activation_keyboard(code.code)
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º
    broadcast_manager = BroadcastManager(bot)
    stats = await broadcast_manager.broadcast_with_tracking(
        user_ids=subscribers,
        text=text,
        reply_markup=keyboard,
        code_id=code.id
    )
    
    logger.info(f"–†–∞—Å—Å—ã–ª–∫–∞ –∫–æ–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {stats}")
    return stats


async def broadcast_custom_post(
    bot: Bot,
    post_data: Dict[str, Any],
    image_file_id: Optional[str],
    admin_id: int
) -> Dict[str, int]:
    """–†–∞—Å—Å—ã–ª–∫–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø–æ—Å—Ç–∞"""
    logger.info(f"–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –ø–æ—Å—Ç–∞: {post_data['title']}")
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
    subscribers = await db.get_all_subscribers()
    if not subscribers:
        logger.warning("–ù–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ—Å—Ç–∞")
        return {"sent": 0, "failed": 0, "blocked": 0}
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    text = MessageTemplates.custom_post_message(post_data)
    
    if post_data.get('button_text') and post_data.get('button_url'):
        keyboard = get_custom_post_with_button_keyboard(
            post_data['button_text'],
            post_data['button_url']
        )
    else:
        keyboard = get_custom_post_keyboard()
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –ë–ï–ó –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è (–¥–ª—è –ø–æ—Å—Ç–æ–≤ –Ω–µ –Ω—É–∂–Ω–æ)
    broadcast_manager = BroadcastManager(bot)
    stats = await broadcast_manager.broadcast_with_tracking(
        user_ids=subscribers,
        text=text,
        photo=image_file_id,
        reply_markup=keyboard,
        code_id=None  # –î–ª—è –ø–æ—Å—Ç–æ–≤ –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –∞–¥–º–∏–Ω—É
    report_text = MessageTemplates.broadcast_report(stats, len(subscribers))
    try:
        await bot.send_message(chat_id=admin_id, text=report_text, parse_mode="HTML")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ –∞–¥–º–∏–Ω—É: {e}")
    
    logger.info(f"–†–∞—Å—Å—ã–ª–∫–∞ –ø–æ—Å—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {stats}")
    return stats


async def update_expired_code_messages(bot: Bot, code_value: str):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –∫–æ–¥–∞"""
    logger.info(f"–û–±–Ω–æ–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∏—Å—Ç–µ–∫—à–µ–≥–æ –∫–æ–¥–∞: {code_value}")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —ç—Ç–∏–º –∫–æ–¥–æ–º
        messages = await db.get_messages_by_code_value(code_value)
        
        if not messages:
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–æ–¥–∞ {code_value} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        expired_text = MessageTemplates.expired_code_message(code_value)
        expired_keyboard = get_code_activation_keyboard(code_value, is_expired=True)
        
        # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        updated_count = 0
        failed_count = 0
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Ä—Ü–∏—è–º–∏
        semaphore = asyncio.Semaphore(5)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 5 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        
        async def update_single_message(msg_record):
            async with semaphore:
                try:
                    await bot.edit_message_text(
                        chat_id=msg_record['user_id'],
                        message_id=msg_record['message_id'],
                        text=expired_text,
                        reply_markup=expired_keyboard,
                        parse_mode="HTML"
                    )
                    return True
                except (TelegramBadRequest, TelegramForbiddenError) as e:
                    logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ {msg_record['message_id']} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ: {e}")
                    return False
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è {msg_record['message_id']}: {e}")
                    return False
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        tasks = [update_single_message(msg) for msg in messages]
        results = await asyncio.gather(*tasks, return_exceptions=True)
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        for result in results:
            if result is True:
                updated_count += 1
            else:
                failed_count += 1
        
        # –ü–æ–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –≤ –ë–î
        await db.deactivate_messages_by_code_value(code_value)
        
        logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–¥–∞ {code_value} –∑–∞–≤–µ—Ä—à–µ–Ω–æ: –æ–±–Ω–æ–≤–ª–µ–Ω–æ {updated_count}, –æ—à–∏–±–æ–∫ {failed_count}")
        
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
async def update_expired_code_messages_by_id(bot: Bot, code_id: int, code_value: str):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏—Å—Ç–µ–∫—à–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ ID –∫–æ–¥–∞ (–¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞)"""
    logger.info(f"–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: –æ–±–Ω–æ–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–æ–¥–∞ {code_value} (ID: {code_id})")
    await update_expired_code_messages(bot, code_value)