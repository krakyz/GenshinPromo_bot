class BroadcastManager:
    """–£–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞—Å—Å—ã–ª–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏–π —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π"""
    
    def __init__(self, bot: Bot, max_concurrent: int = 10, delay: float = 0.05):
        self.bot = bot
        self.semaphore = asyncio.Semaphore(max_concurrent)
        self.delay = delay
        self.stats = {"sent": 0, "failed": 0, "blocked": 0}
        self.sent_messages = []  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    
    async def send_message_safe(
        self,
        user_id: int,
        text: str = None,
        photo: str = None,
        reply_markup=None,
        parse_mode: str = "HTML"
    ) -> Optional[int]:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–¥–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º message_id"""
        async with self.semaphore:
            try:
                if photo:
                    message = await self.bot.send_photo(
                        chat_id=user_id,
                        photo=photo,
                        caption=text,
                        reply_markup=reply_markup,
                        parse_mode=parse_mode
                    )
                else:
                    message = await self.bot.send_message(
                        chat_id=user_id,
                        text=text,
                        reply_markup=reply_markup,
                        parse_mode=parse_mode
                    )
                
                self.stats["sent"] += 1
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
                self.sent_messages.append({
                    'user_id': user_id,
                    'message_id': message.message_id
                })
                
                await asyncio.sleep(self.delay)
                return message.message_id
                
            except TelegramForbiddenError:
                self.stats["blocked"] += 1
                logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞")
                return None
                
            except TelegramRetryAfter as e:
                logger.warning(f"–§–ª—É–¥-–ª–∏–º–∏—Ç: –∂–¥–µ–º {e.retry_after} —Å–µ–∫—É–Ω–¥")
                await asyncio.sleep(e.retry_after)
                return await self.send_message_safe(user_id, text, photo, reply_markup, parse_mode)
                
            except Exception as e:
                self.stats["failed"] += 1
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                return None
    
    async def broadcast_to_users(
        self,
        user_ids: List[int],
        text: str = None,
        photo: str = None,
        reply_markup=None
    ) -> Dict[str, Any]:
        """–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        self.stats = {"sent": 0, "failed": 0, "blocked": 0}
        self.sent_messages = []
        
        tasks = [
            self.send_message_safe(user_id, text, photo, reply_markup)
            for user_id in user_ids
        ]
        
        await asyncio.gather(*tasks, return_exceptions=True)
        return {
            'stats': self.stats.copy(),
            'messages': self.sent_messages.copy()
        }


class MessageTemplates:
    """–®–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    
    @staticmethod
    def new_code_message(code: CodeModel) -> str:
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –ø—Ä–æ–º–æ-–∫–æ–¥–µ"""
        text = f"""üéâ <b>–ù–æ–≤—ã–π –ø—Ä–æ–º–æ-–∫–æ–¥ Genshin Impact!</b>

üî• <b>–ö–æ–¥:</b> <code>{code.code}</code>

üíé <b>–ù–∞–≥—Ä–∞–¥—ã:</b> {code.rewards or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}

üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {code.description or '–ü—Ä–æ–º–æ-–∫–æ–¥ Genshin Impact'}"""
        
        if code.expires_date:
            text += f"\n\n‚è∞ <b>–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:</b> {format_expiry_date(code.expires_date)}"
        
        text += "\n\n<i>üí° –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏!</i>"
        return text
    
    @staticmethod
    def expired_code_message(code_value: str) -> str:
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∏—Å—Ç–µ–∫—à–µ–≥–æ –∫–æ–¥–∞"""
        return f"""‚ùå <b>–ü—Ä–æ–º–æ-–∫–æ–¥ –∏—Å—Ç–µ–∫</b>

–ö–æ–¥ <code>{code_value}</code> –±–æ–ª—å—à–µ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω.

üîî <i>–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤—ã–µ –∫–æ–¥—ã!</i>"""
    
    @staticmethod
    def custom_post_message(post_data: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç –∫–∞—Å—Ç–æ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        return f"{post_data['title']}\n\n{post_data['text']}"
    
    @staticmethod
    def broadcast_report(stats: Dict[str, int], total_subscribers: int) -> str:
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ —Ä–∞—Å—Å—ã–ª–∫–µ"""
        return f"""‚úÖ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {stats['sent']}
‚Ä¢ ‚ùå –û—à–∏–±–æ–∫: {stats['failed']}
‚Ä¢ üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: {stats['blocked']}
‚Ä¢ üë• –í—Å–µ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {total_subscribers}
‚Ä¢ üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {round(stats['sent']/total_subscribers*100, 1) if total_subscribers > 0 else 0}%"""


async def broadcast_new_code(bot: Bot, code: CodeModel) -> Dict[str, int]:
    """–†–∞—Å—Å—ã–ª–∫–∞ –Ω–æ–≤–æ–≥–æ –∫–æ–¥–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å–≤—è–∑–µ–π —Å–æ–æ–±—â–µ–Ω–∏–π"""
    logger.info(f"üöÄ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –Ω–æ–≤–æ–≥–æ –∫–æ–¥–∞: {code.code}")
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
    subscribers = await db.get_all_subscribers()
    if not subscribers:
        logger.warning("‚ùå –ù–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
        return {"sent": 0, "failed": 0, "blocked": 0}
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    text = MessageTemplates.new_code_message(code)
    keyboard = get_code_activation_keyboard(code.code)
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
    broadcast_manager = BroadcastManager(bot)
    result = await broadcast_manager.broadcast_to_users(
        user_ids=subscribers,
        text=text,
        reply_markup=keyboard
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∫–æ–¥–æ–º –¥–ª—è –±—É–¥—É—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    saved_count = 0
    for message_info in result['messages']:
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑—å –∫–æ–¥–∞ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            await db.save_code_message(code.id, message_info['user_id'], message_info['message_id'])
            saved_count += 1
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–≤—è–∑–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    logger.info(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∫–æ–¥–∞ {code.code} –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {result['stats']}, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å–≤—è–∑–µ–π: {saved_count}")
    return result['stats']


async def broadcast_custom_post(
    bot: Bot,
    post_data: Dict[str, Any],
    image_file_id: Optional[str],
    admin_id: int
) -> Dict[str, int]:
    """–†–∞—Å—Å—ã–ª–∫–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø–æ—Å—Ç–∞"""
    logger.info(f"üì¢ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –ø–æ—Å—Ç–∞: {post_data['title']}")
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
    subscribers = await db.get_all_subscribers()
    if not subscribers:
        logger.warning("‚ùå –ù–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ—Å—Ç–∞")
        return {"sent": 0, "failed": 0, "blocked": 0}
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    text = MessageTemplates.custom_post_message(post_data)
    
    if post_data.get('button_text') and post_data.get('button_url'):
        keyboard = get_custom_post_with_button_keyboard(
            post_data['button_text'],
            post_data['button_url']
        )
    else:
        keyboard = get_custom_post_keyboard()
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
    broadcast_manager = BroadcastManager(bot)
    result = await broadcast_manager.broadcast_to_users(
        user_ids=subscribers,
        text=text,
        photo=image_file_id,
        reply_markup=keyboard
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –∞–¥–º–∏–Ω—É
    report_text = MessageTemplates.broadcast_report(result['stats'], len(subscribers))
    try:
        await bot.send_message(chat_id=admin_id, text=report_text, parse_mode="HTML")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ –∞–¥–º–∏–Ω—É: {e}")
    
    logger.info(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –ø–æ—Å—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {result['stats']}")
    return result['stats']


async def update_expired_code_messages(bot: Bot, code_value: str):
    """–ö–õ–Æ–ß–ï–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –∫–æ–¥–∞"""
    logger.info(f"üîÑ –û–±–Ω–æ–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∏—Å—Ç–µ–∫—à–µ–≥–æ –∫–æ–¥–∞: {code_value}")
    
    try:
        # –í–ê–ñ–ù–û: –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —ç—Ç–∏–º –∫–æ–¥–æ–º –ü–û –ï–ì–û –ó–ù–ê–ß–ï–ù–ò–Æ
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –∏—â–µ—Ç –ø–æ –∫–æ–¥—É, –∞ –Ω–µ –ø–æ ID (–∫–æ—Ç–æ—Ä—ã–π —É–∂–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω)
        messages = await db.get_code_messages_by_value(code_value)
        
        if not messages:
            logger.warning(f"‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–æ–¥–∞ {code_value} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        logger.info(f"üì® –ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {len(messages)}")
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏—Å—Ç–µ–∫—à–µ–≥–æ –∫–æ–¥–∞
        expired_text = MessageTemplates.expired_code_message(code_value)
        expired_keyboard = get_code_activation_keyboard(code_value, is_expired=True)
        
        # –°—á–µ—Ç—á–∏–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        updated_count = 0
        failed_count = 0
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–∞–∫–µ—Ç–∞–º–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        for i, msg in enumerate(messages):
            try:
                await bot.edit_message_text(
                    chat_id=msg.user_id,
                    message_id=msg.message_id,
                    text=expired_text,
                    reply_markup=expired_keyboard,
                    parse_mode="HTML"
                )
                updated_count += 1
                
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –∫–∞–∂–¥—ã–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è rate limit
                if (i + 1) % 5 == 0:
                    await asyncio.sleep(0.2)
                
            except (TelegramBadRequest, TelegramForbiddenError) as e:
                # –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏–ª–∏ –±–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
                failed_count += 1
                logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ {msg.id} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ: {e}")
                continue
                
            except TelegramRetryAfter as e:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º rate limit
                logger.warning(f"Rate limit –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: –∂–¥–µ–º {e.retry_after} —Å–µ–∫")
                await asyncio.sleep(e.retry_after)
                
                # –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É
                try:
                    await bot.edit_message_text(
                        chat_id=msg.user_id,
                        message_id=msg.message_id,
                        text=expired_text,
                        reply_markup=expired_keyboard,
                        parse_mode="HTML"
                    )
                    updated_count += 1
                except:
                    failed_count += 1
                
            except Exception as e:
                failed_count += 1
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è {msg.id}: {e}")
        
        logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–¥–∞ {code_value} –∑–∞–≤–µ—Ä—à–µ–Ω–æ:")
        logger.info(f"   üìù –û–±–Ω–æ–≤–ª–µ–Ω–æ: {updated_count}")
        logger.info(f"   ‚ùå –û—à–∏–±–æ–∫: {failed_count}")
        
        # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö (–æ–Ω–∏ –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω—ã)
        try:
            await db.cleanup_expired_code_messages(code_value)
            logger.info(f"üßπ –û—á–∏—â–µ–Ω—ã –∑–∞–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–¥–∞ {code_value}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∑–∞–ø–∏—Å–µ–π —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
        
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–¥–∞ {code_value}: {e}")


# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —É—Ç–∏–ª–∏—Ç–∞—Ä–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
async def process_expired_codes(bot: Bot) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –∏—Å—Ç–µ–∫—à–∏–µ –∫–æ–¥—ã"""
    try:
        from utils.date_utils import get_moscow_time
        moscow_now = get_moscow_time()
        logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –∫–æ–¥–æ–≤: {moscow_now.strftime('%d.%m.%Y %H:%M:%S')}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥—ã –∫ –∏—Å—Ç–µ—á–µ–Ω–∏—é
        codes_to_expire = await db.get_codes_to_expire()
        
        if not codes_to_expire:
            logger.debug("‚úÖ –ò—Å—Ç–µ–∫—à–∏—Ö –∫–æ–¥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return 0
        
        logger.info(f"‚è∞ –ù–∞–π–¥–µ–Ω–æ –∏—Å—Ç–µ–∫—à–∏—Ö –∫–æ–¥–æ–≤: {len(codes_to_expire)}")
        
        processed_count = 0
        for code in codes_to_expire:
            try:
                logger.info(f"üóëÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏—Å—Ç–µ–∫—à–∏–π –∫–æ–¥: {code.code}")
                
                # 1. –°–ù–ê–ß–ê–õ–ê –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è (–ø–æ–∫–∞ –∫–æ–¥ –µ—â–µ –µ—Å—Ç—å –≤ –ë–î)
                await update_expired_code_messages(bot, code.code)
                
                # 2. –ü–û–¢–û–ú —É–¥–∞–ª—è–µ–º –∫–æ–¥ –∏–∑ –ë–î
                success = await db.expire_code_by_id(code.id)
                
                if success:
                    logger.info(f"‚úÖ –ö–æ–¥ {code.code} —É—Å–ø–µ—à–Ω–æ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
                    processed_count += 1
                else:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ {code.code}")
                
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∫–æ–¥–æ–≤
                await asyncio.sleep(2)
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–¥–∞ {code.code}: {e}")
                continue
        
        if processed_count > 0:
            logger.info(f"üéØ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏—Å—Ç–µ–∫—à–∏—Ö –∫–æ–¥–æ–≤: {processed_count}")
        
        return processed_count
        
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏—Å—Ç–µ–∫—à–∏—Ö –∫–æ–¥–æ–≤: {e}")
        return 0
    
"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Å—Ç–µ–∫—à–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
"""

# ========== –§–ê–ô–õ 1: utils/broadcast.py ==========
"""
–ü–û–õ–ù–ê–Ø –†–ê–ë–û–ß–ê–Ø –°–ò–°–¢–ï–ú–ê –†–ê–°–°–´–õ–ö–ò –° –û–ë–ù–û–í–õ–ï–ù–ò–ï–ú –ò–°–¢–ï–ö–®–ò–• –°–û–û–ë–©–ï–ù–ò–ô
"""
import asyncio
import logging
from typing import List, Dict, Any, Optional
from aiogram import Bot
from aiogram.exceptions import TelegramBadRequest, TelegramForbiddenError, TelegramRetryAfter

logger = logging.getLogger(__name__)


class BroadcastManager:
    def __init__(self, bot: Bot, max_concurrent: int = 10, delay: float = 0.05):
        self.bot = bot
        self.semaphore = asyncio.Semaphore(max_concurrent)
        self.delay = delay
        self.stats = {"sent": 0, "failed": 0, "blocked": 0}
        self.sent_messages = []
    
    async def send_message_safe(self, user_id: int, text: str = None, photo: str = None, reply_markup=None, parse_mode: str = "HTML") -> Optional[int]:
        async with self.semaphore:
            try:
                if photo:
                    message = await self.bot.send_photo(chat_id=user_id, photo=photo, caption=text, reply_markup=reply_markup, parse_mode=parse_mode)
                else:
                    message = await self.bot.send_message(chat_id=user_id, text=text, reply_markup=reply_markup, parse_mode=parse_mode)
                
                self.stats["sent"] += 1
                self.sent_messages.append({'user_id': user_id, 'message_id': message.message_id})
                await asyncio.sleep(self.delay)
                return message.message_id
            except TelegramForbiddenError:
                self.stats["blocked"] += 1
                return None
            except TelegramRetryAfter as e:
                await asyncio.sleep(e.retry_after)
                return await self.send_message_safe(user_id, text, photo, reply_markup, parse_mode)
            except Exception as e:
                self.stats["failed"] += 1
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                return None
    
    async def broadcast_to_users(self, user_ids: List[int], text: str = None, photo: str = None, reply_markup=None) -> Dict[str, Any]:
        self.stats = {"sent": 0, "failed": 0, "blocked": 0}
        self.sent_messages = []
        
        tasks = [self.send_message_safe(user_id, text, photo, reply_markup) for user_id in user_ids]
        await asyncio.gather(*tasks, return_exceptions=True)
        
        return {'stats': self.stats.copy(), 'messages': self.sent_messages.copy()}


async def broadcast_new_code(bot: Bot, code) -> Dict[str, int]:
    """–†–∞—Å—Å—ã–ª–∫–∞ –Ω–æ–≤–æ–≥–æ –∫–æ–¥–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å–≤—è–∑–µ–π —Å–æ–æ–±—â–µ–Ω–∏–π"""
    from database import db
    from keyboards.inline import get_code_activation_keyboard
    from utils.date_utils import format_expiry_date
    
    logger.info(f"üöÄ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –Ω–æ–≤–æ–≥–æ –∫–æ–¥–∞: {code.code}")
    
    subscribers = await db.get_all_subscribers()
    if not subscribers:
        return {"sent": 0, "failed": 0, "blocked": 0}
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    text = f"""üéâ <b>–ù–æ–≤—ã–π –ø—Ä–æ–º–æ-–∫–æ–¥ Genshin Impact!</b>

üî• <b>–ö–æ–¥:</b> <code>{code.code}</code>
üíé <b>–ù–∞–≥—Ä–∞–¥—ã:</b> {code.rewards or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {code.description or '–ü—Ä–æ–º–æ-–∫–æ–¥ Genshin Impact'}"""
    
    if code.expires_date:
        text += f"\n\n‚è∞ <b>–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:</b> {format_expiry_date(code.expires_date)}"
    
    text += "\n\n<i>üí° –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏!</i>"
    
    keyboard = get_code_activation_keyboard(code.code)
    
    broadcast_manager = BroadcastManager(bot)
    result = await broadcast_manager.broadcast_to_users(user_ids=subscribers, text=text, reply_markup=keyboard)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∫–æ–¥–æ–º
    saved_count = 0
    for message_info in result['messages']:
        try:
            await db.save_code_message(code.id, message_info['user_id'], message_info['message_id'])
            saved_count += 1
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–≤—è–∑–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    logger.info(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∫–æ–¥–∞ {code.code} –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {result['stats']}, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å–≤—è–∑–µ–π: {saved_count}")
    return result['stats']


async def broadcast_custom_post(bot: Bot, post_data: Dict[str, Any], image_file_id: Optional[str], admin_id: int) -> Dict[str, int]:
    """–†–∞—Å—Å—ã–ª–∫–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø–æ—Å—Ç–∞"""
    from database import db
    from keyboards.inline import get_custom_post_keyboard, get_custom_post_with_button_keyboard
    
    logger.info(f"üì¢ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –ø–æ—Å—Ç–∞: {post_data['title']}")
    
    subscribers = await db.get_all_subscribers()
    if not subscribers:
        return {"sent": 0, "failed": 0, "blocked": 0}
    
    text = f"{post_data['title']}\n\n{post_data['text']}"
    
    if post_data.get('button_text') and post_data.get('button_url'):
        keyboard = get_custom_post_with_button_keyboard(post_data['button_text'], post_data['button_url'])
    else:
        keyboard = get_custom_post_keyboard()
    
    broadcast_manager = BroadcastManager(bot)
    result = await broadcast_manager.broadcast_to_users(user_ids=subscribers, text=text, photo=image_file_id, reply_markup=keyboard)
    
    # –û—Ç—á–µ—Ç –∞–¥–º–∏–Ω—É
    report_text = f"""‚úÖ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {result['stats']['sent']}
‚Ä¢ ‚ùå –û—à–∏–±–æ–∫: {result['stats']['failed']}
‚Ä¢ üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: {result['stats']['blocked']}
‚Ä¢ üë• –í—Å–µ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {len(subscribers)}
‚Ä¢ üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {round(result['stats']['sent']/len(subscribers)*100, 1) if len(subscribers) > 0 else 0}%"""
    
    try:
        await bot.send_message(chat_id=admin_id, text=report_text, parse_mode="HTML")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ –∞–¥–º–∏–Ω—É: {e}")
    
    return result['stats']


async def update_expired_code_messages(bot: Bot, code_value: str):
    """–ö–õ–Æ–ß–ï–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –∫–æ–¥–∞"""
    from database import db
    from keyboards.inline import get_code_activation_keyboard
    
    logger.info(f"üîÑ –û–±–Ω–æ–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∏—Å—Ç–µ–∫—à–µ–≥–æ –∫–æ–¥–∞: {code_value}")
    
    try:
        messages = await db.get_code_messages_by_value(code_value)
        
        if not messages:
            logger.warning(f"‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–æ–¥–∞ {code_value} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        logger.info(f"üì® –ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {len(messages)}")
        
        expired_text = f"""‚ùå <b>–ü—Ä–æ–º–æ-–∫–æ–¥ –∏—Å—Ç–µ–∫</b>

–ö–æ–¥ <code>{code_value}</code> –±–æ–ª—å—à–µ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω.

üîî <i>–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤—ã–µ –∫–æ–¥—ã!</i>"""
        
        expired_keyboard = get_code_activation_keyboard(code_value, is_expired=True)
        
        updated_count = 0
        failed_count = 0
        
        for i, msg in enumerate(messages):
            try:
                await bot.edit_message_text(
                    chat_id=msg.user_id,
                    message_id=msg.message_id,
                    text=expired_text,
                    reply_markup=expired_keyboard,
                    parse_mode="HTML"
                )
                updated_count += 1
                
                if (i + 1) % 5 == 0:
                    await asyncio.sleep(0.2)
                
            except (TelegramBadRequest, TelegramForbiddenError):
                failed_count += 1
                continue
            except TelegramRetryAfter as e:
                await asyncio.sleep(e.retry_after)
                try:
                    await bot.edit_message_text(chat_id=msg.user_id, message_id=msg.message_id, text=expired_text, reply_markup=expired_keyboard, parse_mode="HTML")
                    updated_count += 1
                except:
                    failed_count += 1
            except Exception as e:
                failed_count += 1
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è {msg.id}: {e}")
        
        logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–¥–∞ {code_value} –∑–∞–≤–µ—Ä—à–µ–Ω–æ: –æ–±–Ω–æ–≤–ª–µ–Ω–æ {updated_count}, –æ—à–∏–±–æ–∫ {failed_count}")
        
        try:
            await db.cleanup_expired_code_messages(code_value)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∑–∞–ø–∏—Å–µ–π —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
        
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–¥–∞ {code_value}: {e}")