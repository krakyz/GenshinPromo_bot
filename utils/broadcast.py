"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å–≤—è–∑–µ–π —Å–æ–æ–±—â–µ–Ω–∏–π
"""
import asyncio
import logging
from typing import List, Dict, Any, Optional
from aiogram import Bot
from aiogram.exceptions import TelegramBadRequest, TelegramForbiddenError, TelegramRetryAfter

from database import db
from models import CodeModel
from keyboards.inline import get_code_activation_keyboard
from utils.date_utils import format_expiry_date

logger = logging.getLogger(__name__)


class BroadcastManager:
    """–£–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞—Å—Å—ã–ª–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å–≤—è–∑–µ–π"""
    
    def __init__(self, bot: Bot, max_concurrent: int = 5, delay: float = 0.2):
        self.bot = bot
        self.semaphore = asyncio.Semaphore(max_concurrent)
        self.delay = delay
        self.stats = {"sent": 0, "failed": 0, "blocked": 0, "links_saved": 0}
    
    async def send_message_safe(
        self,
        user_id: int,
        text: str = None,
        photo: str = None,
        reply_markup=None,
        parse_mode: str = "HTML"
    ) -> Optional[int]:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–¥–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç message_id"""
        async with self.semaphore:
            try:
                if photo:
                    message = await self.bot.send_photo(
                        chat_id=user_id,
                        photo=photo,
                        caption=text,
                        reply_markup=reply_markup,
                        parse_mode=parse_mode
                    )
                else:
                    message = await self.bot.send_message(
                        chat_id=user_id,
                        text=text,
                        reply_markup=reply_markup,
                        parse_mode=parse_mode
                    )
                
                self.stats["sent"] += 1
                await asyncio.sleep(self.delay)
                return message.message_id
                
            except TelegramForbiddenError:
                self.stats["blocked"] += 1
                logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞")
                return None
                
            except TelegramRetryAfter as e:
                logger.warning(f"–§–ª—É–¥-–ª–∏–º–∏—Ç: –∂–¥–µ–º {e.retry_after} —Å–µ–∫—É–Ω–¥")
                await asyncio.sleep(e.retry_after)
                return await self.send_message_safe(user_id, text, photo, reply_markup, parse_mode)
                
            except Exception as e:
                self.stats["failed"] += 1
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                return None
    
    async def save_message_link_safe(self, code_id: int, code_value: str, user_id: int, message_id: int) -> bool:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–≤—è–∑–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
        for attempt in range(3):
            try:
                success = await db.save_code_message(code_id, user_id, message_id, code_value)
                if success:
                    self.stats["links_saved"] += 1
                    logger.debug(f"‚úÖ –°–≤—è–∑—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: –∫–æ–¥={code_value}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å={user_id}, —Å–æ–æ–±—â–µ–Ω–∏–µ={message_id}")
                    return True
                else:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–≤—è–∑—å –¥–ª—è {user_id} (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1})")
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–≤—è–∑–∏ –¥–ª—è {user_id}: {e} (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1})")
                
            if attempt < 2:  # –ù–µ –∂–¥–µ–º –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–ø—ã—Ç–∫–∏
                await asyncio.sleep(0.1)
        
        return False


class MessageTemplates:
    """–®–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    
    @staticmethod
    def new_code_message(code: CodeModel) -> str:
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –ø—Ä–æ–º–æ-–∫–æ–¥–µ"""
        text = f"""üéâ <b>–ù–æ–≤—ã–π –ø—Ä–æ–º–æ-–∫–æ–¥ Genshin Impact!</b>

üî• <b>–ö–æ–¥:</b> <code>{code.code}</code>

üíé <b>–ù–∞–≥—Ä–∞–¥—ã:</b> {code.rewards or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}

üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {code.description or '–ü—Ä–æ–º–æ-–∫–æ–¥ Genshin Impact'}"""
        
        if code.expires_date:
            text += f"\n\n‚è∞ <b>–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:</b> {format_expiry_date(code.expires_date)}"
        
        text += "\n\n<i>üí° –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏!</i>"
        return text
    
    @staticmethod
    def expired_code_message(code_value: str) -> str:
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∏—Å—Ç–µ–∫—à–µ–≥–æ –∫–æ–¥–∞"""
        return f"""‚ùå <b>–ü—Ä–æ–º–æ-–∫–æ–¥ –∏—Å—Ç–µ–∫</b>

–ö–æ–¥ <code>{code_value}</code> –±–æ–ª—å—à–µ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω.

üîî <i>–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤—ã–µ –∫–æ–¥—ã!</i>"""
    
    @staticmethod
    def custom_post_message(post_data: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç –∫–∞—Å—Ç–æ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        return f"{post_data['title']}\n\n{post_data['text']}"


async def broadcast_new_code(bot: Bot, code: CodeModel) -> Dict[str, int]:
    """–£–õ–£–ß–®–ï–ù–ù–ê–Ø —Ä–∞—Å—Å—ã–ª–∫–∞ –Ω–æ–≤–æ–≥–æ –∫–æ–¥–∞ —Å –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å–≤—è–∑–µ–π"""
    logger.info(f"üöÄ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –Ω–æ–≤–æ–≥–æ –∫–æ–¥–∞: {code.code} (ID: {code.id})")
    
    if not code.id:
        logger.error("‚ùå –ö–æ–¥ –Ω–µ –∏–º–µ–µ—Ç ID! –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–≤—è–∑–∏ —Å–æ–æ–±—â–µ–Ω–∏–π")
        return {"sent": 0, "failed": 0, "blocked": 0, "links_saved": 0}
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
    subscribers = await db.get_all_subscribers()
    if not subscribers:
        logger.warning("–ù–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
        return {"sent": 0, "failed": 0, "blocked": 0, "links_saved": 0}
    
    logger.info(f"üìä –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏: {len(subscribers)}")
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    text = MessageTemplates.new_code_message(code)
    keyboard = get_code_activation_keyboard(code.code)
    
    # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Ä–∞—Å—Å—ã–ª–∫–∏
    broadcast_manager = BroadcastManager(bot, max_concurrent=3, delay=0.3)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑–∏ –ø–æ—à–∞–≥–æ–≤–æ
    successful_sends = []
    
    for i, user_id in enumerate(subscribers):
        logger.debug(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ {code.code} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} ({i+1}/{len(subscribers)})")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_id = await broadcast_manager.send_message_safe(
            user_id=user_id,
            text=text,
            reply_markup=keyboard
        )
        
        # –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–∞, —Å—Ä–∞–∑—É —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑—å
        if message_id:
            link_saved = await broadcast_manager.save_message_link_safe(
                code_id=code.id,
                code_value=code.code,
                user_id=user_id,
                message_id=message_id
            )
            
            if link_saved:
                successful_sends.append({
                    'user_id': user_id,
                    'message_id': message_id,
                    'link_saved': True
                })
                logger.debug(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ + —Å–≤—è–∑—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
            else:
                successful_sends.append({
                    'user_id': user_id, 
                    'message_id': message_id,
                    'link_saved': False
                })
                logger.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –Ω–æ —Å–≤—è–∑—å –ù–ï —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
        
        # –ö–∞–∂–¥—ã–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π –≤—ã–≤–æ–¥–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        if (i + 1) % 10 == 0:
            logger.info(f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {i+1}/{len(subscribers)} ({broadcast_manager.stats['sent']} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, {broadcast_manager.stats['links_saved']} —Å–≤—è–∑–µ–π)")
    
    stats = broadcast_manager.stats
    
    logger.info(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∫–æ–¥–∞ {code.code} –∑–∞–≤–µ—Ä—à–µ–Ω–∞:")
    logger.info(f"   üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {stats['sent']}")
    logger.info(f"   üîó –°–≤—è–∑–µ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {stats['links_saved']}")
    logger.info(f"   ‚ùå –û—à–∏–±–æ–∫: {stats['failed']}")
    logger.info(f"   üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: {stats['blocked']}")
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–µ–π –≤ –ë–î
    try:
        saved_messages = await db.get_code_messages_by_value(code.code)
        logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ë–î: –Ω–∞–π–¥–µ–Ω–æ {len(saved_messages)} —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–¥–∞ {code.code}")
        
        if len(saved_messages) != stats['links_saved']:
            logger.warning(f"‚ö†Ô∏è –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ: –æ–∂–∏–¥–∞–ª–æ—Å—å {stats['links_saved']}, –Ω–∞–π–¥–µ–Ω–æ {len(saved_messages)}")
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–≤—è–∑–µ–π –≤ –ë–î: {e}")
    
    return stats


async def update_expired_code_messages(bot: Bot, code_value: str):
    """–£–õ–£–ß–®–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    logger.info(f"üîÑ –ù–∞—á–∏–Ω–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–¥–∞: {code_value}")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —ç—Ç–∏–º –∫–æ–¥–æ–º
        messages = await db.get_code_messages_by_value(code_value)
        
        if not messages:
            logger.warning(f"‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–æ–¥–∞ {code_value} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ë–î!")
            logger.info("üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
            logger.info("   - –ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω –¥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã")  
            logger.info("   - –°–≤—è–∑–∏ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ")
            logger.info("   - –ü—Ä–æ–±–ª–µ–º–∞ —Å –º–∏–≥—Ä–∞—Ü–∏–µ–π –ë–î")
            return
        
        logger.info(f"üì® –ù–∞–π–¥–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏—Å—Ç–µ–∫—à–µ–≥–æ –∫–æ–¥–∞
        expired_text = MessageTemplates.expired_code_message(code_value)
        expired_keyboard = get_code_activation_keyboard(code_value, is_expired=True)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º
        updated_count = 0
        failed_count = 0
        
        for i, msg in enumerate(messages):
            logger.debug(f"üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ {i+1}/{len(messages)}: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {msg.user_id}, —Å–æ–æ–±—â–µ–Ω–∏–µ {msg.message_id}")
            
            try:
                await bot.edit_message_text(
                    chat_id=msg.user_id,
                    message_id=msg.message_id,
                    text=expired_text,
                    reply_markup=expired_keyboard,
                    parse_mode="HTML"
                )
                updated_count += 1
                logger.debug(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {msg.user_id}")
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ (–∏–∑–±–µ–≥–∞–µ–º –ª–∏–º–∏—Ç–æ–≤)
                await asyncio.sleep(0.3)
                
            except TelegramBadRequest as e:
                failed_count += 1
                error_msg = str(e)
                if "message is not modified" in error_msg:
                    logger.debug(f"‚ÑπÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ —É {msg.user_id} —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
                elif "message to edit not found" in error_msg:
                    logger.debug(f"‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ —É {msg.user_id} —É–¥–∞–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                else:
                    logger.warning(f"‚ùå –û—à–∏–±–∫–∞ Telegram —É {msg.user_id}: {error_msg}")
                continue
                
            except TelegramForbiddenError:
                failed_count += 1
                logger.debug(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {msg.user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞")
                continue
                
            except TelegramRetryAfter as e:
                logger.warning(f"‚è≥ –§–ª—É–¥-–ª–∏–º–∏—Ç: –∂–¥–µ–º {e.retry_after} —Å–µ–∫—É–Ω–¥")
                await asyncio.sleep(e.retry_after)
                
                # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞
                try:
                    await bot.edit_message_text(
                        chat_id=msg.user_id,
                        message_id=msg.message_id,
                        text=expired_text,
                        reply_markup=expired_keyboard,
                        parse_mode="HTML"
                    )
                    updated_count += 1
                    logger.debug(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {msg.user_id} (–ø–æ—Å–ª–µ –ø–æ–≤—Ç–æ—Ä–∞)")
                except:
                    failed_count += 1
                    logger.warning(f"‚ùå –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å –¥–ª—è {msg.user_id}")
                    
            except Exception as e:
                failed_count += 1
                logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è {msg.id}: {e}")
            
            # –ö–∞–∂–¥—ã–µ 10 –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –≤—ã–≤–æ–¥–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            if (i + 1) % 10 == 0:
                logger.info(f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {i+1}/{len(messages)} (–æ–±–Ω–æ–≤–ª–µ–Ω–æ: {updated_count}, –æ—à–∏–±–æ–∫: {failed_count})")
        
        logger.info(f"üéØ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–¥–∞ {code_value} –∑–∞–≤–µ—Ä—à–µ–Ω–æ:")
        logger.info(f"   ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {updated_count}")
        logger.info(f"   ‚ùå –û—à–∏–±–æ–∫: {failed_count}")
        logger.info(f"   üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {round(updated_count/len(messages)*100, 1) if len(messages) > 0 else 0}%")
        
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–¥–∞ {code_value}: {e}")
        import traceback
        traceback.print_exc()


async def broadcast_custom_post(
    bot: Bot,
    post_data: Dict[str, Any],
    image_file_id: Optional[str],
    admin_id: int
) -> Dict[str, int]:
    """–†–∞—Å—Å—ã–ª–∫–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø–æ—Å—Ç–∞"""
    logger.info(f"üì¢ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –ø–æ—Å—Ç–∞: {post_data['title']}")
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
    subscribers = await db.get_all_subscribers()
    if not subscribers:
        logger.warning("–ù–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ—Å—Ç–∞")
        return {"sent": 0, "failed": 0, "blocked": 0}
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    text = MessageTemplates.custom_post_message(post_data)
    
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞
    keyboard = None
    if post_data.get('button_text') and post_data.get('button_url'):
        from keyboards.inline import get_custom_post_with_button_keyboard
        keyboard = get_custom_post_with_button_keyboard(
            post_data['button_text'],
            post_data['button_url']
        )
    else:
        from keyboards.inline import get_custom_post_keyboard
        keyboard = get_custom_post_keyboard()
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
    broadcast_manager = BroadcastManager(bot, max_concurrent=3, delay=0.5)
    
    for user_id in subscribers:
        await broadcast_manager.send_message_safe(
            user_id=user_id,
            text=text,
            photo=image_file_id,
            reply_markup=keyboard
        )
    
    stats = broadcast_manager.stats
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –∞–¥–º–∏–Ω—É
    report_text = f"""‚úÖ <b>–†–∞—Å—Å—ã–ª–∫–∞ –ø–æ—Å—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>

üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b>
‚Ä¢ üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {stats['sent']}
‚Ä¢ ‚ùå –û—à–∏–±–æ–∫: {stats['failed']}
‚Ä¢ üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: {stats['blocked']}
‚Ä¢ üë• –í—Å–µ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {len(subscribers)}
‚Ä¢ üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {round(stats['sent']/len(subscribers)*100, 1) if len(subscribers) > 0 else 0}%"""

    try:
        await bot.send_message(chat_id=admin_id, text=report_text, parse_mode="HTML")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ –∞–¥–º–∏–Ω—É: {e}")
    
    logger.info(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –ø–æ—Å—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {stats}")
    return stats


# –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏

async def test_code_message_links():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≤—è–∑–µ–π —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ë–î"""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≤—è–∑–µ–π —Å–æ–æ–±—â–µ–Ω–∏–π...")
    
    try:
        codes = await db.get_active_codes()
        logger.info(f"üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–¥–æ–≤: {len(codes)}")
        
        for code in codes:
            messages = await db.get_code_messages_by_value(code.code)
            logger.info(f"üéÅ –ö–æ–¥ {code.code}: {len(messages)} —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
            
            if messages:
                for msg in messages[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                    logger.info(f"   - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {msg.user_id}, –°–æ–æ–±—â–µ–Ω–∏–µ: {msg.message_id}")
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")


async def force_link_all_existing_messages():
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–≤—è–∑–µ–π –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–¥–æ–≤ (–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ)"""
    logger.warning("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–≤—è–∑–µ–π –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–¥–æ–≤")
    logger.warning("–≠—Ç–æ —Å–æ–∑–¥–∞—Å—Ç —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ —Å–≤—è–∑–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
    
    try:
        codes = await db.get_active_codes()
        subscribers = await db.get_all_subscribers()
        
        if not codes or not subscribers:
            logger.info("–ù–µ—Ç –∫–æ–¥–æ–≤ –∏–ª–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–≤—è–∑–µ–π")
            return
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –∫–æ–¥ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        test_code = codes[0]
        logger.info(f"üéØ –°–æ–∑–¥–∞—é –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–≤—è–∑–∏ –¥–ª—è –∫–æ–¥–∞: {test_code.code}")
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ —Å–≤—è–∑–∏ (message_id = 999999 + user_id –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏)
        created_links = 0
        for user_id in subscribers[:5]:  # –¢–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            fake_message_id = 999999 + user_id  # –§–∏–∫—Ç–∏–≤–Ω—ã–π ID —Å–æ–æ–±—â–µ–Ω–∏—è
            
            success = await db.save_code_message(
                code_id=test_code.id,
                user_id=user_id,
                message_id=fake_message_id,
                code_value=test_code.code
            )
            
            if success:
                created_links += 1
        
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {created_links} –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–≤—è–∑–µ–π –¥–ª—è –∫–æ–¥–∞ {test_code.code}")
        logger.info("üí° –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—é —ç—Ç–æ–≥–æ –∫–æ–¥–∞")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–≤—è–∑–µ–π: {e}")