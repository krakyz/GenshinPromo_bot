"""
–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è main.py
"""
import asyncio
import logging
from database import db

logger = logging.getLogger(__name__)


async def init_message_update_system():
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
    
    –î–æ–±–∞–≤—å—Ç–µ –≤—ã–∑–æ–≤ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –≤ main.py –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –±–æ—Ç–∞:
    
    from utils.message_system import init_message_update_system
    
    async def main():
        await init_message_update_system()  # –î–æ–±–∞–≤–∏—Ç—å —ç—Ç—É —Å—Ç—Ä–æ–∫—É
        await dp.start_polling(bot)
    """
    
    try:
        logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é —Å–∏—Å—Ç–µ–º—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π...")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É code_messages –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        async with db.connection() if hasattr(db, 'connection') else db.get_connection() as conn:
            await conn.execute("""
                CREATE TABLE IF NOT EXISTS code_messages (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    code_id INTEGER NOT NULL,
                    user_id INTEGER NOT NULL,
                    message_id INTEGER NOT NULL,
                    code_value TEXT NOT NULL,
                    created_at TEXT NOT NULL,
                    FOREIGN KEY (code_id) REFERENCES codes (id),
                    FOREIGN KEY (user_id) REFERENCES users (user_id),
                    UNIQUE(user_id, message_id)
                )
            """)
            await conn.commit()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥—ã –∫ –æ–±—ä–µ–∫—Ç—É db –µ—Å–ª–∏ –∏—Ö –µ—â–µ –Ω–µ—Ç
        if not hasattr(db, 'save_code_messages'):
            logger.info("–î–æ–±–∞–≤–ª—è—é –º–µ—Ç–æ–¥—ã —Ä–∞–±–æ—Ç—ã —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
            await add_message_methods_to_db()
        
        logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
        raise


async def add_message_methods_to_db():
    """–î–æ–±–∞–≤–ª—è–µ—Ç –º–µ—Ç–æ–¥—ã —Ä–∞–±–æ—Ç—ã —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –∫ –æ–±—ä–µ–∫—Ç—É db"""
    
    # –ú–µ—Ç–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–≤—è–∑–µ–π —Å–æ–æ–±—â–µ–Ω–∏–π
    async def save_code_messages(code_id: int, sent_messages: list):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–≤—è–∑–∏ –º–µ–∂–¥—É –∫–æ–¥–æ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏"""
        try:
            from utils.date_utils import get_moscow_time, serialize_moscow_datetime
            
            async with db.connection() if hasattr(db, 'connection') else db.get_connection() as conn:
                # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–¥–∞
                cursor = await conn.execute("SELECT code FROM codes WHERE id = ?", (code_id,))
                code_row = await cursor.fetchone()
                
                if not code_row:
                    logger.error(f"–ö–æ–¥ —Å ID {code_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return False
                
                code_value = code_row[0]
                current_time = serialize_moscow_datetime(get_moscow_time())
                
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è batch insert
                insert_data = [
                    (code_id, user_id, message_id, code_value, current_time)
                    for user_id, message_id in sent_messages
                ]
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º batch insert
                await conn.executemany("""
                    INSERT OR IGNORE INTO code_messages 
                    (code_id, user_id, message_id, code_value, created_at)
                    VALUES (?, ?, ?, ?, ?)
                """, insert_data)
                
                await conn.commit()
                logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(insert_data)} —Å–≤—è–∑–µ–π —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–¥–∞ {code_value}")
                return True
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–≤—è–∑–µ–π —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
            return False
    
    # –ú–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –∫–æ–¥—É
    async def get_code_messages_by_code_value(code_value: str):
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∫–æ–¥–æ–º"""
        try:
            async with db.connection() if hasattr(db, 'connection') else db.get_connection() as conn:
                cursor = await conn.execute("""
                    SELECT id, code_id, user_id, message_id, code_value, created_at
                    FROM code_messages 
                    WHERE UPPER(code_value) = UPPER(?)
                    ORDER BY created_at DESC
                """, (code_value,))
                
                rows = await cursor.fetchall()
                
                messages = []
                for row in rows:
                    messages.append({
                        'id': row[0],
                        'code_id': row[1],
                        'user_id': row[2],
                        'message_id': row[3],
                        'code_value': row[4],
                        'created_at': row[5]
                    })
                
                logger.debug(f"–ù–∞–π–¥–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–¥–∞ {code_value}")
                return messages
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∫–æ–¥–∞ {code_value}: {e}")
            return []
    
    # –ú–µ—Ç–æ–¥ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π —Å–æ–æ–±—â–µ–Ω–∏–π
    async def delete_code_messages_by_code_value(code_value: str):
        """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ–¥–∞"""
        try:
            async with db.connection() if hasattr(db, 'connection') else db.get_connection() as conn:
                cursor = await conn.execute("""
                    DELETE FROM code_messages 
                    WHERE UPPER(code_value) = UPPER(?)
                """, (code_value,))
                
                await conn.commit()
                deleted_count = cursor.rowcount
                
                logger.info(f"–£–¥–∞–ª–µ–Ω–æ {deleted_count} –∑–∞–ø–∏—Å–µ–π —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–¥–∞ {code_value}")
                return True
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π —Å–æ–æ–±—â–µ–Ω–∏–π –∫–æ–¥–∞ {code_value}: {e}")
            return False
    
    # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥—ã –∫ –æ–±—ä–µ–∫—Ç—É db
    db.save_code_messages = save_code_messages
    db.get_code_messages_by_code_value = get_code_messages_by_code_value
    db.delete_code_messages_by_code_value = delete_code_messages_by_code_value
    
    logger.info("–ú–µ—Ç–æ–¥—ã —Ä–∞–±–æ—Ç—ã —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")


# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —É—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async def test_message_system():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã (–º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Ä—É—á–Ω—É—é)"""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ code_messages
        async with db.connection() if hasattr(db, 'connection') else db.get_connection() as conn:
            cursor = await conn.execute("""
                SELECT name FROM sqlite_master 
                WHERE type='table' AND name='code_messages'
            """)
            table_exists = await cursor.fetchone()
            
            if table_exists:
                logger.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ code_messages –Ω–∞–π–¥–µ–Ω–∞")
                
                # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
                cursor = await conn.execute("SELECT COUNT(*) FROM code_messages")
                count = (await cursor.fetchone())[0]
                logger.info(f"üìä –í —Ç–∞–±–ª–∏—Ü–µ code_messages: {count} –∑–∞–ø–∏—Å–µ–π")
            else:
                logger.warning("‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ code_messages –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        if hasattr(db, 'save_code_messages'):
            logger.info("‚úÖ –ú–µ—Ç–æ–¥ save_code_messages –Ω–∞–π–¥–µ–Ω")
        else:
            logger.warning("‚ö†Ô∏è –ú–µ—Ç–æ–¥ save_code_messages –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
        if hasattr(db, 'get_code_messages_by_code_value'):
            logger.info("‚úÖ –ú–µ—Ç–æ–¥ get_code_messages_by_code_value –Ω–∞–π–¥–µ–Ω")
        else:
            logger.warning("‚ö†Ô∏è –ú–µ—Ç–æ–¥ get_code_messages_by_code_value –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
        logger.info("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    asyncio.run(test_message_system())