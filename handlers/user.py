from aiogram import Router
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from database import db
from models import UserModel
from keyboards.inline import get_subscription_keyboard, get_all_codes_keyboard
from utils.date_utils import format_expiry_date
import logging

logger = logging.getLogger(__name__)
router = Router()

async def get_user_subscription_status(user_id: int) -> bool:
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        subscribers = await db.get_all_subscribers()
        return user_id in subscribers
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False

@router.message(CommandStart())
async def start_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = UserModel(
        user_id=message.from_user.id,
        username=message.from_user.username,
        first_name=message.from_user.first_name
    )
    
    await db.add_user(user)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
    is_subscribed = await get_user_subscription_status(message.from_user.id)
    
    welcome_text = f"""
üéÆ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –ø—Ä–æ–º–æ-–∫–æ–¥–æ–≤ Genshin Impact!</b>

–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! üëã

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–º–æ-–∫–æ–¥–∞ –¥–ª—è Genshin Impact!

üîî <b>–ß—Ç–æ —è —É–º–µ—é:</b>
‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –ø—Ä–æ–º–æ-–∫–æ–¥–∞—Ö
‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞—é –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–¥—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
‚Ä¢ –ü–æ–º–æ–≥–∞—é –Ω–∞–π—Ç–∏ —Å–∞–º—ã–µ —Å–≤–µ–∂–∏–µ –ø—Ä–æ–º–æ-–∫–æ–¥—ã

üì± <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/codes - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–¥—ã
/subscribe - –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
/unsubscribe - –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
/help - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É

‚è∞ <i>–í—Å–µ —Å—Ä–æ–∫–∏ —É–∫–∞–∑–∞–Ω—ã –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–º –≤—Ä–µ–º–µ–Ω–∏ (–ú–°–ö)</i>

–£–¥–∞—á–∏ –≤ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–∏ –ø–æ –¢–µ–π–≤–∞—Ç—É! ‚ú®
"""
    
    if is_subscribed:
        welcome_text += "\n‚úÖ <i>–¢—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∫–æ–¥–∞—Ö!</i>"
    
    await message.answer(
        welcome_text,
        parse_mode="HTML",
        reply_markup=get_subscription_keyboard(is_subscribed)
    )

@router.message(Command("codes"))
@router.callback_query(lambda c: c.data == "view_all_codes")
async def codes_handler(update):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /codes - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–¥—ã –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º"""
    codes = await db.get_active_codes()
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –∫–æ–¥–æ–≤: {len(codes)}")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (—Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ callback)
    if isinstance(update, Message):
        message = update
        edit_message = False
        user_id = message.from_user.id
    else:  # CallbackQuery
        message = update.message
        edit_message = True
        user_id = update.from_user.id
        await update.answer()
    
    if not codes:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        is_subscribed = await get_user_subscription_status(user_id)
        
        text = (
            "ü§∑‚Äç‚ôÇÔ∏è <b>–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–º–æ-–∫–æ–¥–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç</b>\n\n"
        )
        
        if not is_subscribed:
            text += "–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ –Ω–æ–≤—ã—Ö –∫–æ–¥–∞—Ö –ø–µ—Ä–≤—ã–º!"
        else:
            text += "–ö–∞–∫ —Ç–æ–ª—å–∫–æ –ø–æ—è–≤—è—Ç—Å—è –Ω–æ–≤—ã–µ –∫–æ–¥—ã, —Ç—ã –ø–æ–ª—É—á–∏—à—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ!"
        
        keyboard = get_subscription_keyboard(is_subscribed)
        
        if edit_message:
            await message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
        else:
            await message.answer(text, parse_mode="HTML", reply_markup=keyboard)
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ –≤—Å–µ–º–∏ –∫–æ–¥–∞–º–∏
    codes_text = f"üéÅ <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–º–æ-–∫–æ–¥—ã ({len(codes)}):</b>\n\n"
    
    for i, code in enumerate(codes, 1):
        codes_text += f"<b>{i}. {code.code}</b>\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—ã –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã
        if code.rewards:
            codes_text += f"üíé {code.rewards}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ
        if code.description and code.description != code.code:
            codes_text += f"üìù {code.description}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ä–æ–∫–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
        if code.expires_date:
            expires_text = format_expiry_date(code.expires_date)
            codes_text += f"‚è∞ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {expires_text}\n"
        
        codes_text += "\n"
    
    codes_text += "üí° <i>–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –∫–æ–¥–æ–º –Ω–∏–∂–µ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏!</i>\n"
    codes_text += "‚è∞ <i>–í—Ä–µ–º—è —É–∫–∞–∑–∞–Ω–æ –≤ –ú–°–ö (–º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è)</i>"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ –≤—Å–µ–º–∏ –∫–æ–¥–∞–º–∏
    keyboard = get_all_codes_keyboard(codes)
    
    if edit_message:
        await message.edit_text(codes_text, parse_mode="HTML", reply_markup=keyboard)
    else:
        await message.answer(codes_text, parse_mode="HTML", reply_markup=keyboard)

@router.message(Command("help"))
async def help_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
    is_subscribed = await get_user_subscription_status(message.from_user.id)
    
    help_text = """
üìö <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É Genshin Impact –ø—Ä–æ–º–æ-–∫–æ–¥–æ–≤</b>

ü§ñ <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
/codes - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–º–æ-–∫–æ–¥—ã
/subscribe - –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
/unsubscribe - –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

üéÅ <b>–ö–∞–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ-–∫–æ–¥:</b>
1. –ü–æ–ª—É—á–∏ –∫–æ–¥ —á–µ—Ä–µ–∑ —ç—Ç–æ–≥–æ –±–æ—Ç–∞
2. –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∫–æ–¥–∞
3. –í–æ–π–¥–∏ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç HoYoverse
4. –í—ã–±–µ—Ä–∏ —Å–µ—Ä–≤–µ—Ä –∏ –≤–≤–µ–¥–∏ –Ω–∏–∫–Ω–µ–π–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
5. –ü–æ–ª—É—á–∏ –Ω–∞–≥—Ä–∞–¥—ã –≤ –∏–≥—Ä–µ —á–µ—Ä–µ–∑ –ø–æ—á—Ç—É

‚ö†Ô∏è <b>–í–∞–∂–Ω–æ –∑–Ω–∞—Ç—å:</b>
‚Ä¢ –ö–∞–∂–¥—ã–π –∫–æ–¥ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
‚Ä¢ –ö–æ–¥—ã –∏–º–µ—é—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è
‚Ä¢ –î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –Ω—É–∂–µ–Ω Adventure Rank 10+
‚Ä¢ ‚è∞ –í—Å–µ —Å—Ä–æ–∫–∏ —É–∫–∞–∑–∞–Ω—ã –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–º –≤—Ä–µ–º–µ–Ω–∏ (–ú–°–ö)
"""
    
    if not is_subscribed:
        help_text += "\nüì¢ <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b>\n–ü–æ–¥–ø–∏—à–∏—Å—å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –ø—Ä–æ–º–æ-–∫–æ–¥–∞—Ö!"
    else:
        help_text += "\n‚úÖ <b>–¢—ã –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!</b>\n–¢—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –≤—Å–µ –Ω–æ–≤—ã–µ –ø—Ä–æ–º–æ-–∫–æ–¥—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
    
    help_text += "\n\nüéÆ –£–¥–∞—á–∏ –≤ Genshin Impact!"
    
    await message.answer(
        help_text,
        parse_mode="HTML",
        reply_markup=get_subscription_keyboard(is_subscribed)
    )

@router.callback_query(lambda c: c.data == "subscribe")
async def subscribe_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    success = await db.subscribe_user(callback.from_user.id)
    
    if success:
        await callback.message.edit_text(
            "üîî <b>–û—Ç–ª–∏—á–Ω–æ!</b>\n\n"
            "–¢—ã –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –ø—Ä–æ–º–æ-–∫–æ–¥–∞—Ö Genshin Impact!\n"
            "–¢–µ–ø–µ—Ä—å —Ç—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫–∞–∂–¥–æ–º –Ω–æ–≤–æ–º –∫–æ–¥–µ.\n\n"
            "‚è∞ <i>–í—Å–µ —Å—Ä–æ–∫–∏ —É–∫–∞–∑–∞–Ω—ã –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–º –≤—Ä–µ–º–µ–Ω–∏ (–ú–°–ö)</i>\n\n"
            "‚ú® <i>–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–¥—ã!</i>\n\n"
            "üí° <i>–î–ª—è –æ—Ç–ø–∏—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /unsubscribe</i>",
            parse_mode="HTML",
            reply_markup=get_subscription_keyboard(is_subscribed=True)  # –¢–µ–ø–µ—Ä—å –ø–æ–¥–ø–∏—Å–∞–Ω
        )
    else:
        await callback.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.",
            parse_mode="HTML",
            reply_markup=get_subscription_keyboard(is_subscribed=False)
        )
    
    await callback.answer("–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞! üéâ")

@router.message(Command("subscribe"))
async def subscribe_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–¥–ø–∏—Å–∫–∏"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ —É–∂–µ
    is_subscribed = await get_user_subscription_status(message.from_user.id)
    
    if is_subscribed:
        await message.answer(
            "‚úÖ <b>–¢—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω!</b>\n\n"
            "–¢—ã –ø–æ–ª—É—á–∞–µ—à—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—Å–µ—Ö –Ω–æ–≤—ã—Ö –ø—Ä–æ–º–æ-–∫–æ–¥–∞—Ö Genshin Impact.\n\n"
            "üí° <i>–î–ª—è –æ—Ç–ø–∏—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /unsubscribe</i>",
            parse_mode="HTML",
            reply_markup=get_subscription_keyboard(is_subscribed=True)
        )
        return
    
    success = await db.subscribe_user(message.from_user.id)
    
    if success:
        await message.answer(
            "üîî <b>–û—Ç–ª–∏—á–Ω–æ!</b>\n\n"
            "–¢—ã –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –ø—Ä–æ–º–æ-–∫–æ–¥–∞—Ö Genshin Impact!\n\n"
            "üí° <i>–î–ª—è –æ—Ç–ø–∏—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /unsubscribe</i>",
            parse_mode="HTML",
            reply_markup=get_subscription_keyboard(is_subscribed=True)
        )
    else:
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.",
            parse_mode="HTML",
            reply_markup=get_subscription_keyboard(is_subscribed=False)
        )

@router.message(Command("unsubscribe"))
async def unsubscribe_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–ø–∏—Å–∫–∏"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    is_subscribed = await get_user_subscription_status(message.from_user.id)
    
    if not is_subscribed:
        await message.answer(
            "‚ÑπÔ∏è <b>–¢—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</b>\n\n"
            "–î–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /subscribe –∏–ª–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
            parse_mode="HTML",
            reply_markup=get_subscription_keyboard(is_subscribed=False)
        )
        return
    
    success = await db.unsubscribe_user(message.from_user.id)
    
    if success:
        await message.answer(
            "üîï <b>–ì–æ—Ç–æ–≤–æ!</b>\n\n"
            "–¢—ã –æ—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø—Ä–æ–º–æ-–∫–æ–¥–∞—Ö.\n"
            "–¢—ã –≤—Å–µ –µ—â–µ –º–æ–∂–µ—à—å –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–¥—ã –∫–æ–º–∞–Ω–¥–æ–π /codes\n\n"
            "üí° <i>–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /subscribe</i>",
            parse_mode="HTML",
            reply_markup=get_subscription_keyboard(is_subscribed=False)
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Ç–ø–∏—Å–∞–ª—Å—è —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É")
    else:
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.",
            parse_mode="HTML",
            reply_markup=get_subscription_keyboard(is_subscribed=True)
        )

# Callback –¥–ª—è –∏—Å—Ç–µ–∫—à–∏—Ö –∫–æ–¥–æ–≤
@router.callback_query(lambda c: c.data == "expired_code")
async def expired_code_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∏—Å—Ç–µ–∫—à–∏–µ –∫–æ–¥—ã"""
    await callback.answer(
        "‚åõ –≠—Ç–æ—Ç –ø—Ä–æ–º–æ-–∫–æ–¥ –±–æ–ª—å—à–µ –Ω–µ –¥–µ–π—Å—Ç–≤—É–µ—Ç. –°–ª–µ–¥–∏ –∑–∞ –Ω–æ–≤—ã–º–∏ –∫–æ–¥–∞–º–∏!",
        show_alert=True
    )