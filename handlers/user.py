import logging
from typing import Dict, Any

from aiogram import Router, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from database import db
from models import UserModel
from keyboards.inline import (
    get_subscription_keyboard,
    get_all_codes_keyboard,
    get_code_activation_keyboard,
    get_code_confirmation_keyboard
)
from utils.date_utils import get_moscow_time, format_expiry_date

logger = logging.getLogger(__name__)
router = Router()


class UserService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    
    @staticmethod
    async def get_user_subscription_status(user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            subscribers = await db.get_all_subscribers()
            return user_id in subscribers
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
            return False
    
    @staticmethod
    async def register_user(user_id: int, username: str = None, first_name: str = None) -> bool:
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            user = UserModel(
                user_id=user_id,
                username=username,
                first_name=first_name
            )
            return await db.add_user(user)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return False


class MessageTemplates:
    """–®–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    
    @staticmethod
    def welcome_message(first_name: str, is_subscribed: bool) -> str:
        """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        
        base_text = f"""üéÆ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Genshin Promo Bot</b>

ü§ñ <b>–ß—Ç–æ —É–º–µ–µ—Ç —ç—Ç–æ—Ç –±–æ—Ç:</b>
‚Äì –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø—Ä–æ–º–æ-–∫–æ–¥—ã
‚Äì –£–≤–µ–¥–æ–º–ª—è—Ç—å –æ –Ω–æ–≤—ã—Ö –∫–æ–¥–∞—Ö
‚Äì –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å —É–¥–æ–±–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏

üíæ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/codes ‚Äî –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–¥—ã
/subscribe ‚Äî –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
/unsubscribe ‚Äî –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
/help ‚Äî —Å–ø—Ä–∞–≤–∫–∞"""
        
        if not is_subscribed:
            base_text += "\n\nüîî <b>–°–æ–≤–µ—Ç:</b> –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, —á—Ç–æ–±—ã –ø–µ—Ä–≤—ã–º —É–∑–Ω–∞–≤–∞—Ç—å –æ –Ω–æ–≤—ã—Ö –∫–æ–¥–∞—Ö!"
        
        return base_text
    
    @staticmethod
    def codes_list_message(codes) -> str:
        """–°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–æ–¥–æ–≤"""
        if not codes:
            return """ü§∑‚Äç‚ôÇÔ∏è <b>–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–º–æ-–∫–æ–¥–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç</b>

–¢–∞–∫–æ–µ –≤–æ–æ–±—â–µ –±—ã–≤–∞–µ—Ç? GENSHINGIFT —Ä–∞–∑–≤–µ –Ω–µ –≤–µ—á–Ω—ã–π? –°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —Å –±–æ—Ç–æ–º —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫."""
        
        text = f"<b>–ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–º–æ-–∫–æ–¥—ã ({len(codes)}):</b>\n\n"
        
        for code in codes:
            text += f"<code>{code.code}</code>\n"
            text += f"<i>{code.description or 'MISSING_CODE'}</i>\n"
            text += f"<i>{code.rewards or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</i>\n"
            if code.expires_date:
                text += f"‚è∞ –ê–∫—Ç–∏–≤–µ–Ω –¥–æ {format_expiry_date(code.expires_date)}\n\n"
            else:
                text += f"\n"
            
        return text
    
    @staticmethod
    def help_message() -> str:
        """–°–ø—Ä–∞–≤–∫–∞"""
        return """ü§ñ <b>–ß—Ç–æ —É–º–µ–µ—Ç —ç—Ç–æ—Ç –±–æ—Ç:</b>
‚Äî –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø—Ä–æ–º–æ-–∫–æ–¥—ã
‚Äî –£–≤–µ–¥–æ–º–ª—è—Ç—å –æ –Ω–æ–≤—ã—Ö –∫–æ–¥–∞—Ö
‚Äî –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å —É–¥–æ–±–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏

üíæ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
‚Äî /codes - –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–¥—ã
‚Äî /subscribe - –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
‚Äî /unsubscribe - –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
‚Äî /help - —Å–ø—Ä–∞–≤–∫–∞

‚ùì <b>–ö–∞–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥:</b>
1. –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –∫–æ–¥–æ–º
2. –í–æ–π–¥–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç HoYoverse
3. –í—ã–±–µ—Ä–∏ –ø—Ä–æ—Ñ–∏–ª—å –∏ —Ä–µ–≥–∏–æ–Ω —Å–µ—Ä–≤–µ—Ä–∞
4. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏—é

<i>üí° –ö–æ–¥—ã –º–æ–∂–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∏ –≤ —Å–∞–º–æ–π –∏–≥—Ä–µ —á–µ—Ä–µ–∑ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫!</i>"""


@router.message(CommandStart())
async def start_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await UserService.register_user(
        user_id=message.from_user.id,
        username=message.from_user.username,
        first_name=message.from_user.first_name
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
    is_subscribed = await UserService.get_user_subscription_status(message.from_user.id)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    welcome_text = MessageTemplates.welcome_message(message.from_user.first_name, is_subscribed)
    
    await message.answer(
        welcome_text,
        parse_mode="HTML",
        reply_markup=get_subscription_keyboard(is_subscribed)
    )


@router.message(Command("codes"))
async def codes_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /codes"""
    try:
        codes = await db.get_active_codes()
        codes_text = MessageTemplates.codes_list_message(codes)
        
        if codes:
            keyboard = get_all_codes_keyboard(codes)
        else:
            is_subscribed = await UserService.get_user_subscription_status(message.from_user.id)
            keyboard = get_subscription_keyboard(is_subscribed)
        
        await message.answer(codes_text, parse_mode="HTML", reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–æ–≤: {e}")
        await message.answer(
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–¥–æ–≤</b>\n\n–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.",
            parse_mode="HTML"
        )


@router.message(Command("subscribe"))
async def subscribe_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /subscribe"""
    try:
        is_subscribed = await UserService.get_user_subscription_status(message.from_user.id)
        
        if is_subscribed:
            await message.answer(
                "üîî <b>–¢—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!</b>\n\n"
                "–¢—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∫–∞–∂–¥–æ–º –Ω–æ–≤–æ–º –ø—Ä–æ–º–æ-–∫–æ–¥–µ.\n\n"
                "üí° –î–ª—è –æ—Ç–ø–∏—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /unsubscribe",
                parse_mode="HTML",
                reply_markup=get_subscription_keyboard(True)
            )
        else:
            success = await db.subscribe_user(message.from_user.id)
            
            if success:
                await message.answer(
                    "‚úÖ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!</b>\n\n"
                    "üéâ –¢–µ–ø–µ—Ä—å —Ç—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –ø—Ä–æ–º–æ-–∫–æ–¥–∞—Ö –ø–µ—Ä–≤—ã–º!\n\n"
                    "üí° –î–ª—è –æ—Ç–ø–∏—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /unsubscribe",
                    parse_mode="HTML",
                    reply_markup=get_subscription_keyboard(True)
                )
            else:
                await message.answer(
                    "‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.",
                    parse_mode="HTML"
                )
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {e}")
        await message.answer(
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</b>\n\n–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.",
            parse_mode="HTML"
        )


@router.message(Command("unsubscribe"))
async def unsubscribe_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /unsubscribe"""
    try:
        is_subscribed = await UserService.get_user_subscription_status(message.from_user.id)
        
        if not is_subscribed:
            await message.answer(
                "‚ÑπÔ∏è <b>–¢—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</b>\n\n"
                "–î–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /subscribe –∏–ª–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
                parse_mode="HTML",
                reply_markup=get_subscription_keyboard(False)
            )
        else:
            success = await db.unsubscribe_user(message.from_user.id)
            
            if success:
                await message.answer(
                    "üîï <b>–ì–æ—Ç–æ–≤–æ!</b>\n\n"
                    "–¢—ã –æ—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø—Ä–æ–º–æ-–∫–æ–¥–∞—Ö.\n"
                    "–¢—ã –≤—Å–µ –µ—â–µ –º–æ–∂–µ—à—å –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–¥—ã –∫–æ–º–∞–Ω–¥–æ–π /codes\n\n"
                    "üí° –î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /subscribe",
                    parse_mode="HTML",
                    reply_markup=get_subscription_keyboard(False)
                )
            else:
                await message.answer(
                    "‚ùå <b>–û—à–∏–±–∫–∞ –æ—Ç–ø–∏—Å–∫–∏</b>\n\n–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.",
                    parse_mode="HTML"
                )
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {e}")
        await message.answer(
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</b>\n\n–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.",
            parse_mode="HTML"
        )


@router.message(Command("help"))
async def help_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = MessageTemplates.help_message()
    
    is_subscribed = await UserService.get_user_subscription_status(message.from_user.id)
    
    await message.answer(
        help_text,
        parse_mode="HTML",
        reply_markup=get_subscription_keyboard(is_subscribed)
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –∑–∞–ø—Ä–æ—Å–æ–≤
@router.callback_query(F.data == "subscribe")
async def subscribe_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
    success = await db.subscribe_user(callback.from_user.id)
    
    if success:
        await callback.answer("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!", show_alert=True)
        await callback.message.edit_reply_markup(
            reply_markup=get_subscription_keyboard(True)
        )
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏", show_alert=True)


@router.callback_query(F.data == "view_all_codes")
async def view_all_codes_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∫–æ–¥–æ–≤"""
    try:
        codes = await db.get_active_codes()
        codes_text = MessageTemplates.codes_list_message(codes)
        
        if codes:
            keyboard = get_all_codes_keyboard(codes)
        else:
            is_subscribed = await UserService.get_user_subscription_status(callback.from_user.id)
            keyboard = get_subscription_keyboard(is_subscribed)
        
        await callback.message.edit_text(
            codes_text,
            parse_mode="HTML",
            reply_markup=keyboard
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–¥–æ–≤: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–¥–æ–≤", show_alert=True)
    
    await callback.answer()


@router.callback_query(F.data == "expired_code")
async def expired_code_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∏—Å—Ç–µ–∫—à–∏–µ –∫–æ–¥—ã"""
    await callback.answer(
        "‚åõ –≠—Ç–æ—Ç –ø—Ä–æ–º–æ-–∫–æ–¥ –±–æ–ª—å—à–µ –Ω–µ –¥–µ–π—Å—Ç–≤—É–µ—Ç. –°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤—ã–º–∏ –∫–æ–¥–∞–º–∏!",
        show_alert=True
    )


user_checked_codes = {}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –∫–æ–¥–æ–≤
user_checked_codes = {}

@router.callback_query(lambda c: c.data and c.data.startswith("check_code_"))
async def check_code_and_update_button(callback: CallbackQuery):
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É"""
    try:
        code_value = callback.data.replace("check_code_", "")
        user_id = callback.from_user.id
        
        print(f"üîç –ü—Ä–æ–≤–µ—Ä—è—é –∫–æ–¥: {code_value}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ –≤ –ë–î
        active_codes = await db.get_active_codes()
        code_obj = None
        
        for code in active_codes:
            if code.code == code_value:
                code_obj = code
                break
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id not in user_checked_codes:
            user_checked_codes[user_id] = {}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–¥–∞
        if not code_obj:
            user_checked_codes[user_id][code_value] = 'expired'
            await callback.answer(f"‚ùå –ö–æ–¥ {code_value} –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω!", show_alert=True)
        else:
            if code_obj.expires_date:
                from utils.date_utils import get_moscow_time
                moscow_now = get_moscow_time()
                if moscow_now >= code_obj.expires_date:
                    user_checked_codes[user_id][code_value] = 'expired'
                    await callback.answer(f"‚è∞ –ö–æ–¥ {code_value} –∏—Å—Ç–µ–∫!", show_alert=True)
                else:
                    user_checked_codes[user_id][code_value] = 'valid'
                    await callback.answer(f"‚úÖ –ö–æ–¥ {code_value} –ø—Ä–æ–≤–µ—Ä–µ–Ω!")
            else:
                user_checked_codes[user_id][code_value] = 'valid'  
                await callback.answer(f"‚úÖ –ö–æ–¥ {code_value} –ø—Ä–æ–≤–µ—Ä–µ–Ω!")
        
        # –û–ë–ù–û–í–õ–Ø–ï–ú –ö–õ–ê–í–ò–ê–¢–£–†–£
        codes = await db.get_active_codes()
        if codes:
            checked_codes = user_checked_codes.get(user_id, {})
            inline_keyboard = []
            
            for code in codes:
                if code.is_active:
                    code_val = code.code
                    status = checked_codes.get(code_val, 'unchecked')
                    
                    if status == 'valid':
                        # –ö–æ–¥ –ø—Ä–æ–≤–µ—Ä–µ–Ω –∏ –∞–∫—Ç—É–∞–ª–µ–Ω
                        activation_url = f"https://genshin.hoyoverse.com/gift?code={code_val}"
                        inline_keyboard.append([
                            InlineKeyboardButton(
                                text=f"‚úÖ {code_val} (–ø—Ä–æ–≤–µ—Ä–µ–Ω)",
                                url=activation_url
                            )
                        ])
                    elif status == 'expired':
                        # –ö–æ–¥ –∏—Å—Ç–µ–∫
                        inline_keyboard.append([
                            InlineKeyboardButton(
                                text=f"‚ùå {code_val} (–∏—Å—Ç–µ–∫)",
                                callback_data="expired_code"
                            )
                        ])
                    else:
                        # –ö–æ–¥ –Ω–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω
                        inline_keyboard.append([
                            InlineKeyboardButton(
                                text=f"üéÅ {code_val}",
                                callback_data=f"check_code_{code_val}"
                            )
                        ])
            
            from aiogram.types import InlineKeyboardMarkup
            new_keyboard = InlineKeyboardMarkup(inline_keyboard=inline_keyboard)
            await callback.message.edit_reply_markup(reply_markup=new_keyboard)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏", show_alert=True)




# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –∫ –∫–æ–¥–∞–º" –∏–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
@router.callback_query(F.data == "back_to_codes")  
async def back_to_codes_callback(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –∫–æ–¥–æ–≤ –∏–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫–æ–¥—ã
        codes = await db.get_active_codes()
        
        if not codes:
            codes_text = """ü§∑‚Äç‚ôÇÔ∏è <b>–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–º–æ-–∫–æ–¥–æ–≤ –Ω–µ—Ç</b>

–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤—ã–µ –∫–æ–¥—ã!"""
            
            from keyboards.inline import get_subscription_keyboard
            is_subscribed = len(await db.get_all_subscribers()) > 0  # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            keyboard = get_subscription_keyboard(is_subscribed)
        else:
            codes_text = f"""üìã <b>–í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–º–æ-–∫–æ–¥—ã ({len(codes)}):</b>

üí° <i>–ù–∞–∂–º–∏ –Ω–∞ –∫–æ–¥, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –µ–≥–æ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–¥ –∞–∫—Ç–∏–≤–∞—Ü–∏–µ–π</i>"""
            
            from keyboards.inline import get_all_codes_keyboard
            keyboard = get_all_codes_keyboard(codes)
        
        await callback.message.edit_text(
            codes_text,
            parse_mode="HTML", 
            reply_markup=keyboard
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –∫–æ–¥–∞–º: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–¥–æ–≤", show_alert=True)


# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–¥–µ –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é
async def get_code_by_value(code_value: str):
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞ –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é"""
    try:
        active_codes = await db.get_active_codes()
        for code in active_codes:
            if code.code == code_value:
                return code
        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞ {code_value}: {e}")
        return None


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–æ–¥–æ–≤ (–µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –≤ –±—É–¥—É—â–µ–º)
async def check_multiple_codes_validity():
    """–ú–∞—Å—Å–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö –∫–æ–¥–æ–≤"""
    try:
        codes = await db.get_active_codes()
        moscow_now = get_moscow_time()
        
        valid_codes = []
        expired_codes = []
        
        for code in codes:
            if code.expires_date and moscow_now >= code.expires_date:
                expired_codes.append(code)
            else:
                valid_codes.append(code)
        
        logger.info(f"üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–æ–≤: {len(valid_codes)} –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö, {len(expired_codes)} –∏—Å—Ç–µ–∫—à–∏—Ö")
        
        return {
            'valid': valid_codes,
            'expired': expired_codes,
            'total': len(codes)
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–æ–≤: {e}")
        return {'valid': [], 'expired': [], 'total': 0}