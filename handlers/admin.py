from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, PhotoSize
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram import Bot

from database import db
from models import CodeModel, CustomPostModel
from filters.admin_filter import AdminFilter
from keyboards.inline import get_admin_keyboard, get_code_activation_keyboard, get_custom_post_keyboard
from datetime import datetime
import asyncio
import logging
import os

logger = logging.getLogger(__name__)

router = Router()

class AdminStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    waiting_for_code_data = State()
    waiting_for_code_to_expire = State()
    waiting_for_custom_post_data = State()
    waiting_for_custom_post_image = State()

@router.message(Command("admin"), AdminFilter())
async def admin_panel(message: Message):
    """–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    admin_text = """
üîß <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –±–æ—Ç–∞ Genshin Impact –∫–æ–¥–æ–≤</b>

üëã –ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!

üìä <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:</b>
‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–º–æ-–∫–æ–¥
‚Ä¢ –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ç–µ–∫—à–∏–π –∫–æ–¥
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞
‚Ä¢ –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–¥—ã
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
‚Ä¢ –°–æ–∑–¥–∞—Ç—å —Ä–µ–∫–ª–∞–º–Ω—ã–π –ø–æ—Å—Ç

–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:
"""
    
    await message.answer(
        admin_text,
        parse_mode="HTML",
        reply_markup=get_admin_keyboard()
    )

@router.callback_query(lambda c: c.data == "admin_add_code", AdminFilter())
async def add_code_callback(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–¥–∞"""
    await callback.message.edit_text(
        "‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–º–æ-–∫–æ–¥–∞</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–º–æ-–∫–æ–¥–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
        "<code>–ö–û–î\n"
        "–û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–¥–∞\n"
        "–ù–∞–≥—Ä–∞–¥—ã</code>\n\n"
        "<b>–ü—Ä–∏–º–µ—Ä:</b>\n"
        "<code>GENSHINGIFT\n"
        "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—Ä–æ–º–æ-–∫–æ–¥\n"
        "50 –ü—Ä–∏–º–æ–≥–µ–º–æ–≤ + 3 –ö–Ω–∏–≥–∏ –≥–µ—Ä–æ—è</code>\n\n"
        "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã",
        parse_mode="HTML"
    )
    
    await state.set_state(AdminStates.waiting_for_code_data)
    await callback.answer()

@router.callback_query(lambda c: c.data == "admin_custom_post", AdminFilter())
async def custom_post_callback(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø–æ—Å—Ç–∞"""
    await callback.message.edit_text(
        "üì¢ <b>–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –ø–æ—Å—Ç–∞</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ—Å—Ç–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
        "<code>–ó–∞–≥–æ–ª–æ–≤–æ–∫\n"
        "–¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞\n"
        "–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)\n"
        "–°—Å—ã–ª–∫–∞ –∫–Ω–æ–ø–∫–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</code>\n\n"
        "<b>–ü—Ä–∏–º–µ—Ä –±–µ–∑ –∫–Ω–æ–ø–∫–∏:</b>\n"
        "<code>üéÆ –ù–æ–≤–æ—Å—Ç—å!\n"
        "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ 4.2 —É–∂–µ –≤ –∏–≥—Ä–µ!</code>\n\n"
        "<b>–ü—Ä–∏–º–µ—Ä —Å –∫–Ω–æ–ø–∫–æ–π:</b>\n"
        "<code>üõí –ú–∞–≥–∞–∑–∏–Ω\n"
        "–°–∫–∏–¥–∫–∏ –Ω–∞ –ø—Ä–∏–º–æ–≥–µ–º—ã!\n"
        "–ö—É–ø–∏—Ç—å —Å–µ–π—á–∞—Å\n"
        "https://example.com</code>\n\n"
        "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã",
        parse_mode="HTML"
    )
    
    await state.set_state(AdminStates.waiting_for_custom_post_data)
    await callback.answer()

@router.message(AdminStates.waiting_for_code_data, AdminFilter())
async def process_new_code(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –∫–æ–¥–∞ –æ—Ç –∞–¥–º–∏–Ω–∞"""
    if message.text == "/cancel":
        await message.answer("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        await state.clear()
        return
    
    try:
        lines = message.text.strip().split('\n')
        if len(lines) < 3:
            await message.answer(
                "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!</b>\n\n"
                "–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 3 —Å—Ç—Ä–æ–∫–∏:\n"
                "1. –ö–æ–¥\n"
                "2. –û–ø–∏—Å–∞–Ω–∏–µ\n"
                "3. –ù–∞–≥—Ä–∞–¥—ã",
                parse_mode="HTML"
            )
            return
        
        code = lines[0].strip().upper()
        description = lines[1].strip()
        rewards = lines[2].strip()
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–æ–¥–∞
        new_code = CodeModel(
            code=code,
            description=description,
            rewards=rewards
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        success = await db.add_code(new_code)
        
        if success:
            await message.answer(
                f"‚úÖ <b>–ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n"
                f"üî• <b>–ö–æ–¥:</b> <code>{code}</code>\n"
                f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description}\n"
                f"üíé <b>–ù–∞–≥—Ä–∞–¥—ã:</b> {rewards}",
                parse_mode="HTML"
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
            await broadcast_new_code(bot, new_code)
            
        else:
            await message.answer(
                f"‚ùå <b>–û—à–∏–±–∫–∞!</b>\n\n"
                f"–ö–æ–¥ <code>{code}</code> —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.",
                parse_mode="HTML"
            )
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–¥–∞: {e}")
        await message.answer(
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–¥–∞</b>\n\n"
            "–ü—Ä–æ–≤–µ—Ä—å —Ñ–æ—Ä–º–∞—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.",
            parse_mode="HTML"
        )
    
    await state.clear()

@router.message(AdminStates.waiting_for_custom_post_data, AdminFilter())
async def process_custom_post_data(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø–æ—Å—Ç–∞"""
    if message.text == "/cancel":
        await message.answer("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        await state.clear()
        return
    
    try:
        lines = message.text.strip().split('\n')
        if len(lines) < 2:
            await message.answer(
                "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!</b>\n\n"
                "–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 —Å—Ç—Ä–æ–∫–∏:\n"
                "1. –ó–∞–≥–æ–ª–æ–≤–æ–∫\n"
                "2. –¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞",
                parse_mode="HTML"
            )
            return
        
        title = lines[0].strip()
        text = lines[1].strip()
        button_text = lines[2].strip() if len(lines) > 2 else None
        button_url = lines[3].strip() if len(lines) > 3 else None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏, —Ç–æ —É–∫–∞–∑–∞–Ω–∞ –∏ —Å—Å—ã–ª–∫–∞
        if button_text and not button_url:
            await message.answer(
                "‚ùå <b>–û—à–∏–±–∫–∞!</b>\n\n"
                "–ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Ç–∞–∫–∂–µ —É–∫–∞–∑–∞—Ç—å —Å—Å—ã–ª–∫—É.",
                parse_mode="HTML"
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        await state.update_data({
            'title': title,
            'text': text,
            'button_text': button_text,
            'button_url': button_url
        })
        
        await message.answer(
            "üì∏ <b>–û—Ç–ª–∏—á–Ω–æ!</b>\n\n"
            "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ—Å—Ç–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å /skip —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.\n\n"
            "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
            parse_mode="HTML"
        )
        
        await state.set_state(AdminStates.waiting_for_custom_post_image)
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞: {e}")
        await message.answer(
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö</b>\n\n"
            "–ü—Ä–æ–≤–µ—Ä—å —Ñ–æ—Ä–º–∞—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.",
            parse_mode="HTML"
        )

@router.message(AdminStates.waiting_for_custom_post_image, AdminFilter())
async def process_custom_post_image(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø–æ—Å—Ç–∞"""
    if message.text == "/cancel":
        await message.answer("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        await state.clear()
        return
    
    data = await state.get_data()
    image_file_id = None
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–ø—Ä–∞–≤–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É skip
    if message.photo:
        # –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–∏–≤—ã—Å—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
        photo: PhotoSize = message.photo[-1]
        image_file_id = photo.file_id
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ—Å—Ç–∞: {image_file_id}")
    elif message.text == "/skip":
        logger.info("–ü–æ—Å—Ç —Å–æ–∑–¥–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    else:
        await message.answer(
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!</b>\n\n"
            "–û—Ç–ø—Ä–∞–≤—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞.",
            parse_mode="HTML"
        )
        return
    
    try:
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–æ—Å—Ç–∞
        custom_post = CustomPostModel(
            title=data['title'],
            text=data['text'],
            image_path=image_file_id,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id –∫–∞–∫ –ø—É—Ç—å
            button_text=data.get('button_text'),
            button_url=data.get('button_url')
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        success = await db.add_custom_post(custom_post)
        
        if success:
            await message.answer(
                f"‚úÖ <b>–ü–æ—Å—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!</b>\n\n"
                f"üì¢ <b>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</b> {custom_post.title}\n"
                f"üìù <b>–¢–µ–∫—Å—Ç:</b> {custom_post.text}\n"
                f"üì∏ <b>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:</b> {'–î–∞' if image_file_id else '–ù–µ—Ç'}\n"
                f"üîó <b>–ö–Ω–æ–ø–∫–∞:</b> {custom_post.button_text if custom_post.button_text else '–ù–µ—Ç'}\n\n"
                "üöÄ <b>–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...</b>",
                parse_mode="HTML"
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
            await broadcast_custom_post(bot, custom_post, message.from_user.id)
            
        else:
            await message.answer(
                "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞</b>\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.",
                parse_mode="HTML"
            )
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞: {e}")
        await message.answer(
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.",
            parse_mode="HTML"
        )
    
    await state.clear()

@router.callback_query(lambda c: c.data == "admin_expire_code", AdminFilter())
async def expire_code_callback(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–æ–¥–∞"""
    codes = await db.get_active_codes()
    
    if not codes:
        await callback.message.edit_text(
            "ü§∑‚Äç‚ôÇÔ∏è <b>–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–¥–æ–≤ –¥–ª—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏</b>",
            parse_mode="HTML",
            reply_markup=get_admin_keyboard()
        )
        await callback.answer()
        return
    
    codes_list = "\n".join([f"‚Ä¢ <code>{code.code}</code>" for code in codes])
    
    await callback.message.edit_text(
        f"‚ùå <b>–î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ–º–æ-–∫–æ–¥–∞</b>\n\n"
        f"<b>–ê–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–¥—ã:</b>\n{codes_list}\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å, –∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã:",
        parse_mode="HTML"
    )
    
    await state.set_state(AdminStates.waiting_for_code_to_expire)
    await callback.answer()

@router.message(AdminStates.waiting_for_code_to_expire, AdminFilter())
async def process_expire_code(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–æ–¥–∞"""
    if message.text == "/cancel":
        await message.answer("‚ùå –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –∫–æ–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
        await state.clear()
        return
    
    code = message.text.strip().upper()
    success = await db.expire_code(code)
    
    if success:
        await message.answer(
            f"‚úÖ <b>–ö–æ–¥ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!</b>\n\n"
            f"–ö–æ–¥ <code>{code}</code> –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –∏—Å—Ç–µ–∫—à–∏–π.",
            parse_mode="HTML"
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –∫–æ–¥–∞
        await broadcast_expired_code(bot, code)
    else:
        await message.answer(
            f"‚ùå <b>–û—à–∏–±–∫–∞!</b>\n\n"
            f"–ê–∫—Ç–∏–≤–Ω—ã–π –∫–æ–¥ <code>{code}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            parse_mode="HTML"
        )
    
    await state.clear()

@router.callback_query(lambda c: c.data == "admin_stats", AdminFilter())
async def admin_stats_callback(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–¥–æ–≤
        active_codes = await db.get_active_codes()
        active_count = len(active_codes)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        total_users, subscribers_count, _ = await db.get_user_stats()
        
        stats_text = f"""
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>

üéÅ <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–º–æ-–∫–æ–¥—ã:</b> {active_count}
üë• <b>–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {total_users}
üîî <b>–ü–æ–¥–ø–∏—Å—á–∏–∫–∏:</b> {subscribers_count}
üìÖ <b>–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:</b> {datetime.now().strftime('%d.%m.%Y %H:%M')}

<b>–ê–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–¥—ã:</b>
"""
        
        if active_codes:
            for code in active_codes:
                created = code.created_at.strftime('%d.%m') if code.created_at else 'N/A'
                stats_text += f"‚Ä¢ <code>{code.code}</code> (–¥–æ–±–∞–≤–ª–µ–Ω {created})\n"
        else:
            stats_text += "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–¥–æ–≤\n"
        
        await callback.message.edit_text(
            stats_text,
            parse_mode="HTML",
            reply_markup=get_admin_keyboard()
        )
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
            reply_markup=get_admin_keyboard()
        )
    
    await callback.answer()

@router.callback_query(lambda c: c.data == "admin_users", AdminFilter())
async def admin_users_callback(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö"""
    try:
        total_users, subscribers_count, recent_users = await db.get_user_stats()
        
        users_text = f"""
üë• <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö</b>

üìà <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}
‚Ä¢ –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {subscribers_count}
‚Ä¢ –û—Ç–ø–∏—Å–∞–≤—à–∏—Ö—Å—è: {total_users - subscribers_count}

üë§ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>
"""
        
        if recent_users:
            for user in recent_users:
                name = user['first_name'] or '–ë–µ–∑ –∏–º–µ–Ω–∏'
                username = f"@{user['username']}" if user['username'] else '–ù–µ—Ç username'
                status = "üîî" if user['is_subscribed'] else "üîï"
                joined = user['joined_at'].strftime('%d.%m.%Y') if user['joined_at'] else 'N/A'
                
                users_text += f"\n{status} <b>{name}</b> ({username})\n"
                users_text += f"   ID: <code>{user['user_id']}</code>\n"
                users_text += f"   –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è: {joined}\n"
        else:
            users_text += "\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        
        await callback.message.edit_text(
            users_text,
            parse_mode="HTML",
            reply_markup=get_admin_keyboard()
        )
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö: {e}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö",
            reply_markup=get_admin_keyboard()
        )
    
    await callback.answer()

@router.callback_query(lambda c: c.data == "admin_active_codes", AdminFilter())
async def admin_active_codes_callback(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–¥—ã"""
    codes = await db.get_active_codes()
    
    if not codes:
        await callback.message.edit_text(
            "ü§∑‚Äç‚ôÇÔ∏è <b>–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–º–æ-–∫–æ–¥–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç</b>",
            parse_mode="HTML",
            reply_markup=get_admin_keyboard()
        )
        await callback.answer()
        return
    
    codes_text = f"üìã <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–º–æ-–∫–æ–¥—ã ({len(codes)}):</b>\n\n"
    
    for code in codes:
        created = code.created_at.strftime('%d.%m.%Y %H:%M') if code.created_at else 'N/A'
        codes_text += f"""
üî• <b>{code.code}</b>
üìù {code.description}
üíé {code.rewards}
‚è∞ –î–æ–±–∞–≤–ª–µ–Ω: {created}
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
"""
    
    await callback.message.edit_text(
        codes_text,
        parse_mode="HTML",
        reply_markup=get_admin_keyboard()
    )
    await callback.answer()

async def broadcast_new_code(bot: Bot, code: CodeModel):
    """–†–∞—Å—Å—ã–ª–∫–∞ –Ω–æ–≤–æ–≥–æ –∫–æ–¥–∞ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º –±–µ–∑ –¥–∞—Ç—ã"""
    subscribers = await db.get_all_subscribers()
    
    if not subscribers:
        logger.info("–ù–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
        return
    
    broadcast_text = f"""
üéâ <b>–ù–û–í–´–ô –ü–†–û–ú–û-–ö–û–î GENSHIN IMPACT!</b>

üî• <b>–ö–æ–¥:</b> <code>{code.code}</code>

üíé <b>–ù–∞–≥—Ä–∞–¥—ã:</b> {code.rewards}

üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {code.description}

‚ö° <b>–ê–∫—Ç–∏–≤–∏—Ä—É–π –±—ã—Å—Ç—Ä–µ–µ!</b> –ü—Ä–æ–º–æ-–∫–æ–¥—ã –∏–º–µ—é—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è.

üí° <i>–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏!</i>
"""
    
    successful_sends = 0
    failed_sends = 0
    
    for user_id in subscribers:
        try:
            await bot.send_message(
                chat_id=user_id,
                text=broadcast_text,
                parse_mode="HTML",
                reply_markup=get_code_activation_keyboard(code.code)
            )
            successful_sends += 1
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã API
            await asyncio.sleep(0.05)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            failed_sends += 1
    
    logger.info(f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {successful_sends} —É—Å–ø–µ—à–Ω–æ, {failed_sends} –Ω–µ—É–¥–∞—á–Ω–æ")

async def broadcast_custom_post(bot: Bot, post: CustomPostModel, admin_id: int):
    """–†–∞—Å—Å—ã–ª–∫–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º"""
    subscribers = await db.get_all_subscribers()
    
    if not subscribers:
        await bot.send_message(admin_id, "‚ÑπÔ∏è –ù–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞
    post_text = f"""
üì¢ <b>{post.title}</b>

{post.text}
"""
    
    successful_sends = 0
    failed_sends = 0
    
    for user_id in subscribers:
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = get_custom_post_keyboard(post.button_text, post.button_url)
            
            if post.image_path:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
                await bot.send_photo(
                    chat_id=user_id,
                    photo=post.image_path,
                    caption=post_text,
                    parse_mode="HTML",
                    reply_markup=keyboard
                )
            else:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                await bot.send_message(
                    chat_id=user_id,
                    text=post_text,
                    parse_mode="HTML",
                    reply_markup=keyboard
                )
            
            successful_sends += 1
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã API
            await asyncio.sleep(0.05)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            failed_sends += 1
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
    result_text = f"""
‚úÖ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>

üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:</b>
‚Ä¢ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {successful_sends}
‚Ä¢ –û—à–∏–±–æ–∫: {failed_sends}
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {len(subscribers)}

üì¢ <b>–ü–æ—Å—Ç:</b> "{post.title}"
"""
    
    await bot.send_message(admin_id, result_text, parse_mode="HTML")
    logger.info(f"–†–∞—Å—Å—ã–ª–∫–∞ –ø–æ—Å—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {successful_sends} —É—Å–ø–µ—à–Ω–æ, {failed_sends} –Ω–µ—É–¥–∞—á–Ω–æ")

async def broadcast_expired_code(bot: Bot, code: str):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –∫–æ–¥–∞"""
    subscribers = await db.get_all_subscribers()
    
    if not subscribers:
        return
    
    expired_text = f"""
‚è∞ <b>–ü–†–û–ú–û-–ö–û–î –ò–°–¢–ï–ö</b>

‚ùå –ö–æ–¥ <code>{code}</code> –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω.

üîî –°–ª–µ–¥–∏ –∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤—ã–µ –∫–æ–¥—ã!
"""
    
    for user_id in subscribers:
        try:
            await bot.send_message(
                chat_id=user_id,
                text=expired_text,
                parse_mode="HTML"
            )
            await asyncio.sleep(0.05)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
@router.message(Command("cancel"), AdminFilter())
async def cancel_admin_action(message: Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –∞–¥–º–∏–Ω-–¥–µ–π—Å—Ç–≤–∏—è"""
    await state.clear()
    await message.answer(
        "‚ùå <b>–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ</b>",
        parse_mode="HTML",
        reply_markup=get_admin_keyboard()
    )