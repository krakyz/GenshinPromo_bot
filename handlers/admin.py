from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, PhotoSize, FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram import Bot
from aiogram.exceptions import TelegramBadRequest, TelegramForbiddenError, TelegramRetryAfter

from database import db
from models import CodeModel
from filters.admin_filter import AdminFilter
from keyboards.inline import (
    get_admin_keyboard, get_code_activation_keyboard, 
    get_database_admin_keyboard, get_custom_post_keyboard,
    get_custom_post_with_button_keyboard, get_admin_stats_keyboard,
    get_admin_codes_keyboard, get_admin_users_keyboard,
    get_admin_add_code_keyboard, get_admin_expire_code_keyboard,
    get_admin_custom_post_keyboard
)
from utils.date_utils import parse_expiry_date, format_expiry_date
from datetime import datetime
import asyncio
import logging
import os
import aiosqlite
from typing import Optional
import hashlib

logger = logging.getLogger(__name__)

router = Router()

class AdminStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    waiting_for_code_data = State()
    waiting_for_code_to_expire = State()
    waiting_for_custom_post_data = State()
    waiting_for_custom_post_image = State()
    waiting_for_db_reset_confirmation = State()

def get_content_hash(text: str) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —Ö–µ—à –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
    return hashlib.md5(text.encode()).hexdigest()

async def safe_edit_message(callback: CallbackQuery, new_text: str, reply_markup=None, parse_mode="HTML"):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
    try:
        current_text = callback.message.text or callback.message.caption or ""
        current_hash = get_content_hash(current_text)
        new_hash = get_content_hash(new_text)
        
        if current_hash == new_hash:
            await callback.answer("‚ÑπÔ∏è –î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã", show_alert=False)
            return True
        
        await callback.message.edit_text(new_text, parse_mode=parse_mode, reply_markup=reply_markup)
        await callback.answer("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ", show_alert=False)
        return True
        
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            await callback.answer("‚ÑπÔ∏è –î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã", show_alert=False)
            return True
        else:
            logger.error(f"–û—à–∏–±–∫–∞ Telegram –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", show_alert=True)
            return False
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", show_alert=True)
        return False

async def broadcast_new_code(bot: Bot, code: CodeModel):
    """–†–∞—Å—Å—ã–ª–∫–∞ –Ω–æ–≤–æ–≥–æ –∫–æ–¥–∞ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º"""
    logger.info(f"–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –Ω–æ–≤–æ–≥–æ –∫–æ–¥–∞: {code.code}")
    
    try:
        subscribers = await db.get_all_subscribers()
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {len(subscribers)}")
        
        if not subscribers:
            logger.warning("–ù–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        code_text = f"""
üéâ <b>–ù–æ–≤—ã–π –ø—Ä–æ–º–æ-–∫–æ–¥ Genshin Impact!</b>

üî• <b>–ö–æ–¥:</b> <code>{code.code}</code>

üíé <b>–ù–∞–≥—Ä–∞–¥—ã:</b> {code.rewards or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}

üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {code.description or '–ü—Ä–æ–º–æ-–∫–æ–¥ Genshin Impact'}
"""
        
        if code.expires_date:
            code_text += f"\n‚è∞ <b>–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:</b> {format_expiry_date(code.expires_date)}"
        
        code_text += "\n\n<i>üí° –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏!</i>"
        
        keyboard = get_code_activation_keyboard(code.code)
        
        sent_count = 0
        failed_count = 0
        blocked_count = 0
        
        for user_id in subscribers:
            try:
                message = await bot.send_message(
                    chat_id=user_id,
                    text=code_text,
                    parse_mode="HTML",
                    reply_markup=keyboard
                )
                
                # –û–ë–ù–û–í–õ–ï–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –≤–∏–¥–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                await db.save_code_message(code.id, user_id, message.message_id, code.code)
                
                sent_count += 1
                await asyncio.sleep(0.05)
                
            except TelegramForbiddenError:
                blocked_count += 1
                logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞")
                
            except TelegramRetryAfter as e:
                logger.warning(f"–§–ª—É–¥-–ª–∏–º–∏—Ç: –∂–¥–µ–º {e.retry_after} —Å–µ–∫—É–Ω–¥")
                await asyncio.sleep(e.retry_after)
                
                try:
                    message = await bot.send_message(
                        chat_id=user_id,
                        text=code_text,
                        parse_mode="HTML",
                        reply_markup=keyboard
                    )
                    await db.save_code_message(code.id, user_id, message.message_id, code.code)
                    sent_count += 1
                except Exception:
                    failed_count += 1
                    
            except Exception as e:
                failed_count += 1
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        
        logger.info(f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}, –û—à–∏–±–æ–∫: {failed_count}, –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: {blocked_count}")
        
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ –∫–æ–¥–∞: {e}")

async def update_expired_code_messages(bot: Bot, code: str, messages_to_update):
    """–ò–°–ü–†–ê–í–õ–ï–ù–ê: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–∏ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –∫–æ–¥–∞"""
    logger.info(f"–û–±–Ω–æ–≤–ª—è—é {len(messages_to_update)} —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∏—Å—Ç–µ–∫—à–µ–≥–æ –∫–æ–¥–∞: {code}")
    
    if not messages_to_update:
        logger.info("–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∏—Å—Ç–µ–∫—à–µ–≥–æ –∫–æ–¥–∞
    expired_text = f"""
‚åõ <b>–ü—Ä–æ–º–æ-–∫–æ–¥ –∏—Å—Ç–µ–∫</b>

‚ùå <b>–ö–æ–¥:</b> <code>{code}</code>

<i>–≠—Ç–æ—Ç –ø—Ä–æ–º–æ-–∫–æ–¥ –±–æ–ª—å—à–µ –Ω–µ –¥–µ–π—Å—Ç–≤—É–µ—Ç. –°–ª–µ–¥–∏ –∑–∞ –Ω–æ–≤—ã–º–∏ –∫–æ–¥–∞–º–∏!</i>
"""
    
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∏—Å—Ç–µ–∫—à–∏–º –∫–æ–¥–æ–º
    keyboard = get_code_activation_keyboard(code, is_expired=True)
    
    updated_count = 0
    failed_count = 0
    
    for message_info in messages_to_update:
        try:
            await bot.edit_message_text(
                chat_id=message_info.user_id,
                message_id=message_info.message_id,
                text=expired_text,
                parse_mode="HTML",
                reply_markup=keyboard
            )
            updated_count += 1
            
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏
            await asyncio.sleep(0.05)
            
        except TelegramBadRequest as e:
            if "message is not modified" in str(e):
                # –°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ
                updated_count += 1
            elif "message to edit not found" in str(e):
                # –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
                logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message_info.message_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message_info.user_id} —É–¥–∞–ª–µ–Ω–æ")
            else:
                failed_count += 1
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è {message_info.message_id}: {e}")
                
        except TelegramForbiddenError:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞
            logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message_info.user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞")
            
        except TelegramRetryAfter as e:
            logger.warning(f"–§–ª—É–¥-–ª–∏–º–∏—Ç –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: –∂–¥–µ–º {e.retry_after} —Å–µ–∫—É–Ω–¥")
            await asyncio.sleep(e.retry_after)
            
            # –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É
            try:
                await bot.edit_message_text(
                    chat_id=message_info.user_id,
                    message_id=message_info.message_id,
                    text=expired_text,
                    parse_mode="HTML",
                    reply_markup=keyboard
                )
                updated_count += 1
            except Exception:
                failed_count += 1
                
        except Exception as e:
            failed_count += 1
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –û–±–Ω–æ–≤–ª–µ–Ω–æ: {updated_count}, –û—à–∏–±–æ–∫: {failed_count}")

@router.message(Command("admin"), AdminFilter())
async def admin_panel(message: Message):
    """–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    admin_text = """
üîß <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –±–æ—Ç–∞ Genshin Impact –∫–æ–¥–æ–≤</b>

üëã –ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!

üìä <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:</b>
‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–º–æ-–∫–æ–¥
‚Ä¢ –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ç–µ–∫—à–∏–π –∫–æ–¥
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞
‚Ä¢ –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–¥—ã
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
‚Ä¢ –°–æ–∑–¥–∞—Ç—å —Ä–µ–∫–ª–∞–º–Ω—ã–π –ø–æ—Å—Ç
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö

–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:
"""
    
    await message.answer(
        admin_text,
        parse_mode="HTML",
        reply_markup=get_admin_keyboard()
    )

@router.callback_query(lambda c: c.data == "admin_add_code", AdminFilter())
async def add_code_callback(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–¥–∞"""
    await callback.message.edit_text(
        "‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–º–æ-–∫–æ–¥–∞</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–º–æ-–∫–æ–¥–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
        "<code>–ö–û–î\n"
        "–û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–¥–∞\n"
        "–ù–∞–≥—Ä–∞–¥—ã\n"
        "–î–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</code>\n\n"
        "<b>–ü—Ä–∏–º–µ—Ä –±–µ–∑ –¥–∞—Ç—ã –∏—Å—Ç–µ—á–µ–Ω–∏—è:</b>\n"
        "<code>GENSHINGIFT\n"
        "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—Ä–æ–º–æ-–∫–æ–¥\n"
        "50 –ü—Ä–∏–º–æ–≥–µ–º–æ–≤ + 3 –ö–Ω–∏–≥–∏ –≥–µ—Ä–æ—è</code>\n\n"
        "<b>–ü—Ä–∏–º–µ—Ä —Å –¥–∞—Ç–æ–π –∏—Å—Ç–µ—á–µ–Ω–∏—è:</b>\n"
        "<code>LIMITEDCODE\n"
        "–û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –ø—Ä–æ–º–æ-–∫–æ–¥\n"
        "100 –ü—Ä–∏–º–æ–≥–µ–º–æ–≤ + 5 –ö–Ω–∏–≥ –≥–µ—Ä–æ—è\n"
        "15.10.2025 23:59</code>\n\n"
        "–§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú –∏–ª–∏ –î–î.–ú–ú.–ì–ì–ì–ì\n\n"
        "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã",
        parse_mode="HTML",
        reply_markup=get_admin_add_code_keyboard()
    )
    
    await state.set_state(AdminStates.waiting_for_code_data)
    await callback.answer()

@router.message(AdminStates.waiting_for_code_data, AdminFilter())
async def process_new_code(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –∫–æ–¥–∞ –æ—Ç –∞–¥–º–∏–Ω–∞"""
    if message.text == "/cancel":
        await message.answer("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        await state.clear()
        return
    
    try:
        lines = message.text.strip().split('\n')
        if len(lines) < 3:
            await message.answer(
                "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!</b>\n\n"
                "–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 3 —Å—Ç—Ä–æ–∫–∏:\n"
                "1. –ö–æ–¥\n"
                "2. –û–ø–∏—Å–∞–Ω–∏–µ\n"
                "3. –ù–∞–≥—Ä–∞–¥—ã\n"
                "4. –î–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)",
                parse_mode="HTML"
            )
            return
        
        code = lines[0].strip().upper()
        description = lines[1].strip()
        rewards = lines[2].strip()
        expires_date = None
        
        if len(lines) > 3:
            expires_date = parse_expiry_date(lines[3])
            if lines[3].strip() and not expires_date:
                await message.answer(
                    "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!</b>\n\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç:\n"
                    "‚Ä¢ <code>15.10.2025 23:59</code> (—Å –≤—Ä–µ–º–µ–Ω–µ–º)\n"
                    "‚Ä¢ <code>15.10.2025</code> (–±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏, –∏—Å—Ç–µ—á–µ—Ç –≤ 23:59 –ú–°–ö)",
                    parse_mode="HTML"
                )
                return
        
        new_code = CodeModel(
            code=code,
            description=description,
            rewards=rewards,
            expires_date=expires_date
        )
        
        code_id = await db.add_code(new_code)
        
        if code_id:
            confirmation_text = (
                f"‚úÖ <b>–ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n"
                f"üî• <b>–ö–æ–¥:</b> <code>{code}</code>\n"
                f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description}\n"
                f"üíé <b>–ù–∞–≥—Ä–∞–¥—ã:</b> {rewards}"
            )
            
            if expires_date:
                confirmation_text += f"\n‚è∞ <b>–ò—Å—Ç–µ–∫–∞–µ—Ç:</b> {format_expiry_date(expires_date)}"
            
            confirmation_text += "\n\nüöÄ <b>–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º...</b>"
            
            await message.answer(confirmation_text, parse_mode="HTML")
            
            new_code.id = code_id
            await broadcast_new_code(bot, new_code)
            
            subscribers = await db.get_all_subscribers()
            await message.answer(
                f"üì¨ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
                f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã {len(subscribers)} –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º.",
                parse_mode="HTML"
            )
            
        else:
            await message.answer(
                f"‚ùå <b>–û—à–∏–±–∫–∞!</b>\n\n"
                f"–ö–æ–¥ <code>{code}</code> —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.",
                parse_mode="HTML"
            )
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–¥–∞: {e}")
        await message.answer(
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–¥–∞</b>\n\n"
            "–ü—Ä–æ–≤–µ—Ä—å —Ñ–æ—Ä–º–∞—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.",
            parse_mode="HTML"
        )
    
    await state.clear()

@router.callback_query(lambda c: c.data == "admin_expire_code", AdminFilter())
async def expire_code_callback(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–æ–¥–∞"""
    codes = await db.get_active_codes()
    
    if not codes:
        await callback.message.edit_text(
            "ü§∑‚Äç‚ôÇÔ∏è <b>–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–¥–æ–≤ –¥–ª—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏</b>\n\n"
            "–î–æ–±–∞–≤—å –Ω–æ–≤—ã–µ –∫–æ–¥—ã —á–µ—Ä–µ–∑ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏.",
            parse_mode="HTML",
            reply_markup=get_admin_expire_code_keyboard()
        )
        await callback.answer()
        return
    
    codes_list = "\n".join([f"‚Ä¢ <code>{code.code}</code>" for code in codes])
    
    await callback.message.edit_text(
        f"‚ùå <b>–î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ–º–æ-–∫–æ–¥–∞</b>\n\n"
        f"<b>–ê–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–¥—ã:</b>\n{codes_list}\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å, –∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã:",
        parse_mode="HTML",
        reply_markup=get_admin_expire_code_keyboard()
    )
    
    await state.set_state(AdminStates.waiting_for_code_to_expire)
    await callback.answer()

@router.message(AdminStates.waiting_for_code_to_expire, AdminFilter())
async def process_expire_code(message: Message, state: FSMContext, bot: Bot):
    """–ò–°–ü–†–ê–í–õ–ï–ù–ê: –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–æ–¥–∞ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if message.text == "/cancel":
        await message.answer("‚ùå –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –∫–æ–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
        await state.clear()
        return
    
    code = message.text.strip().upper()
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –¢–µ–ø–µ—Ä—å –ø–æ–ª—É—á–∞–µ–º –∫–∞–∫ —Å—Ç–∞—Ç—É—Å, —Ç–∞–∫ –∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    success, messages_to_update = await db.expire_code(code)
    
    if success:
        await message.answer(
            f"‚úÖ <b>–ö–æ–¥ —É–¥–∞–ª–µ–Ω!</b>\n\n"
            f"–ö–æ–¥ <code>{code}</code> –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.\n\n"
            f"üîÑ <b>–û–±–Ω–æ–≤–ª—è—é {len(messages_to_update)} —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π...</b>",
            parse_mode="HTML"
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        await update_expired_code_messages(bot, code, messages_to_update)
        
        await message.answer(
            f"‚úÖ <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!</b>\n\n"
            f"–í—Å–µ —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ–¥–æ–º <code>{code}</code> –ø–æ–º–µ—á–µ–Ω—ã –∫–∞–∫ –∏—Å—Ç–µ–∫—à–∏–µ.",
            parse_mode="HTML"
        )
    else:
        await message.answer(
            f"‚ùå <b>–û—à–∏–±–∫–∞!</b>\n\n"
            f"–ê–∫—Ç–∏–≤–Ω—ã–π –∫–æ–¥ <code>{code}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            parse_mode="HTML"
        )
    
    await state.clear()

# –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
# (–î–æ–±–∞–≤—å—Ç–µ –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ñ–∞–π–ª–∞)

@router.callback_query(lambda c: c.data == "admin_back", AdminFilter())
async def admin_back_callback(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞"""
    await state.clear()
    
    admin_text = """
üîß <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –±–æ—Ç–∞ Genshin Impact –∫–æ–¥–æ–≤</b>

üëã –ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!

üìä <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:</b>
‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–º–æ-–∫–æ–¥
‚Ä¢ –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ç–µ–∫—à–∏–π –∫–æ–¥
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞
‚Ä¢ –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–¥—ã
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
‚Ä¢ –°–æ–∑–¥–∞—Ç—å —Ä–µ–∫–ª–∞–º–Ω—ã–π –ø–æ—Å—Ç
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö

–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:
"""
    
    await safe_edit_message(callback, admin_text, get_admin_keyboard())

@router.callback_query(lambda c: c.data == "expired_code")
async def expired_code_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∏—Å—Ç–µ–∫—à–∏–µ –∫–æ–¥—ã"""
    await callback.answer(
        "‚åõ –≠—Ç–æ—Ç –ø—Ä–æ–º–æ-–∫–æ–¥ –±–æ–ª—å—à–µ –Ω–µ –¥–µ–π—Å—Ç–≤—É–µ—Ç. –°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤—ã–º–∏ –∫–æ–¥–∞–º–∏!",
        show_alert=True
    )