"""
–ê–¥–º–∏–Ω-–º–æ–¥—É–ª—å —Å —Å–∏—Å—Ç–µ–º–æ–π —Ç—Ä–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
"""
import asyncio
import logging
import os
import hashlib
from typing import Optional, Dict, Any
from datetime import datetime

from aiogram import Router, F, Bot
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, PhotoSize, FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.exceptions import TelegramBadRequest

from database import db
from models import CodeModel, BroadcastStats
from filters.admin_filter import AdminFilter
from keyboards.inline import (
    get_admin_keyboard, get_admin_stats_keyboard, get_admin_codes_keyboard,
    get_admin_users_keyboard, get_database_admin_keyboard, get_admin_back_keyboard,
    get_admin_expire_codes_keyboard, get_expire_code_click_keyboard,
    get_reset_db_click_keyboard, get_custom_post_keyboard, get_custom_post_with_button_keyboard
)
from utils.date_utils import DateTimeUtils
from utils.broadcast import broadcast_new_code, broadcast_custom_post, update_expired_code_messages

logger = logging.getLogger(__name__)
router = Router()


class AdminStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    waiting_for_code_data = State()
    waiting_for_code_to_expire = State()
    waiting_for_custom_post_data = State()
    waiting_for_custom_post_image = State()
    waiting_for_db_reset_confirmation = State()


class AdminService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
    
    @staticmethod
    async def get_admin_stats() -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –ë–ï–ó —Å–ø–∏—Å–∫–∞ –∫–æ–¥–æ–≤"""
        try:
            active_codes = await db.get_active_codes()
            total_users, subscribers_count, _ = await db.get_user_stats()
            
            return {
                'active_codes_count': len(active_codes),
                'total_users': total_users,
                'subscribers_count': subscribers_count,
                'updated_at': DateTimeUtils.get_moscow_time()
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥–º–∏–Ω —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {}
    
    @staticmethod
    async def validate_code_data(lines: list) -> Dict[str, Any]:
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–≥–æ –∫–æ–¥–∞"""
        if len(lines) < 3:
            return {
                'valid': False,
                'error': "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!</b>\n\n–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 3 —Å—Ç—Ä–æ–∫–∏:\n1. –ö–æ–¥\n2. –û–ø–∏—Å–∞–Ω–∏–µ\n3. –ù–∞–≥—Ä–∞–¥—ã\n4. –î–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"
            }
        
        code = lines[0].strip().upper()
        description = lines[1].strip()
        rewards = lines[2].strip()
        expires_date = None
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–¥–∞
        if not code or len(code) < 3:
            return {
                'valid': False,
                'error': "‚ùå <b>–ö–æ–¥ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π!</b>\n\n–ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞."
            }
        
        if len(code) > 20:
            return {
                'valid': False,
                'error': "‚ùå <b>–ö–æ–¥ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π!</b>\n\n–ö–æ–¥ –Ω–µ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –±–æ–ª–µ–µ 20 —Å–∏–º–≤–æ–ª–æ–≤."
            }
        
        # –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã
        if len(lines) > 3 and lines[3].strip():
            expires_date = DateTimeUtils.parse_expiry_date(lines[3])
            if not expires_date:
                return {
                    'valid': False,
                    'error': "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!</b>\n\n" + DateTimeUtils.get_date_examples()
                }
        
        return {
            'valid': True,
            'code': code,
            'description': description,
            'rewards': rewards,
            'expires_date': expires_date
        }
    
    @staticmethod
    async def validate_custom_post_data(lines: list) -> Dict[str, Any]:
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø–æ—Å—Ç–∞"""
        if len(lines) < 2:
            return {
                'valid': False,
                'error': "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!</b>\n\n–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 —Å—Ç—Ä–æ–∫–∏:\n1. –ó–∞–≥–æ–ª–æ–≤–æ–∫\n2. –¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞"
            }
        
        title = lines[0].strip()
        text = lines[1].strip()
        button_text = lines[2].strip() if len(lines) > 2 else None
        button_url = lines[3].strip() if len(lines) > 3 else None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏, —Ç–æ —É–∫–∞–∑–∞–Ω–∞ –∏ —Å—Å—ã–ª–∫–∞
        if button_text and not button_url:
            return {
                'valid': False,
                'error': "‚ùå <b>–û—à–∏–±–∫–∞!</b>\n\n–ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Ç–∞–∫–∂–µ —É–∫–∞–∑–∞—Ç—å —Å—Å—ã–ª–∫—É."
            }
        
        return {
            'valid': True,
            'title': title,
            'text': text,
            'button_text': button_text,
            'button_url': button_url
        }


class MessageUtils:
    """–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏"""
    
    @staticmethod
    def get_content_hash(text: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Ö–µ—à –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
        return hashlib.md5(text.encode()).hexdigest()
    
    @staticmethod
    async def safe_edit_message(
        callback: CallbackQuery,
        new_text: str,
        reply_markup=None,
        parse_mode: str = "HTML"
    ) -> bool:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
        try:
            current_text = callback.message.text or callback.message.caption or ""
            
            current_hash = MessageUtils.get_content_hash(current_text)
            new_hash = MessageUtils.get_content_hash(new_text)
            
            if current_hash == new_hash:
                await callback.answer("‚ÑπÔ∏è –î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã", show_alert=False)
                return True
            
            await callback.message.edit_text(
                new_text,
                parse_mode=parse_mode,
                reply_markup=reply_markup
            )
            await callback.answer("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ", show_alert=False)
            return True
            
        except TelegramBadRequest as e:
            if "message is not modified" in str(e):
                await callback.answer("‚ÑπÔ∏è –î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã", show_alert=False)
                return True
            else:
                logger.error(f"–û—à–∏–±–∫–∞ Telegram –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", show_alert=True)
                return False
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", show_alert=True)
            return False


class MessageTemplates:
    """–®–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    
    @staticmethod
    def welcome_message() -> str:
        """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
        return """üîß <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –±–æ—Ç–∞ Genshin Impact –∫–æ–¥–æ–≤</b>

üëã –ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!

üìä <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:</b>
‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–º–æ-–∫–æ–¥
‚Ä¢ –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ç–µ–∫—à–∏–π –∫–æ–¥
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞
‚Ä¢ –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–¥—ã
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
‚Ä¢ –°–æ–∑–¥–∞—Ç—å —Ä–µ–∫–ª–∞–º–Ω—ã–π –ø–æ—Å—Ç
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö

–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:"""
    
    @staticmethod
    def stats_message(stats: Dict[str, Any]) -> str:
        """–°–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ë–ï–ó —Å–ø–∏—Å–∫–∞ –∫–æ–¥–æ–≤"""
        if not stats:
            return "‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏</b>"
        
        text = f"""üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>

üéÅ <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–º–æ-–∫–æ–¥—ã:</b> {stats.get('active_codes_count', 0)}
üë• <b>–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {stats.get('total_users', 0)}
üîî <b>–ü–æ–¥–ø–∏—Å—á–∏–∫–∏:</b> {stats.get('subscribers_count', 0)}
üìÖ <b>–û–±–Ω–æ–≤–ª–µ–Ω–æ:</b> {stats.get('updated_at', datetime.now()).strftime('%d.%m.%Y %H:%M –ú–°–ö')}

üí° <i>–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–¥–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π —Ä–∞–∑–¥–µ–ª "–ê–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–¥—ã"</i>"""
        
        return text
    
    @staticmethod
    def codes_list_message(codes) -> str:
        """–°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–¥–æ–≤"""
        if not codes:
            return """ü§∑‚Äç‚ôÇÔ∏è <b>–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–º–æ-–∫–æ–¥–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç</b>

–î–æ–±–∞–≤—å –Ω–æ–≤—ã–π –∫–æ–¥ —á–µ—Ä–µ–∑ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏."""
        
        text = f"üìã <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–º–æ-–∫–æ–¥—ã ({len(codes)}):</b>\n\n"
        
        for code in codes:
            created = code.created_at.strftime('%d.%m.%Y %H:%M –ú–°–ö') if code.created_at else 'N/A'
            expires = DateTimeUtils.format_expiry_date(code.expires_date) if code.expires_date else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
            
            text += f"""üî• <b>{code.code}</b>
üìù {code.description or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üíé {code.rewards or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
‚è∞ –î–æ–±–∞–≤–ª–µ–Ω: {created}
‚åõ –ò—Å—Ç–µ–∫–∞–µ—Ç: {expires}
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

"""
        
        return text
    
    @staticmethod
    def users_info_message(total_users: int, subscribers_count: int, recent_users) -> str:
        """–°–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö"""
        text = f"""üë• <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö</b>

üìà <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}
‚Ä¢ –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {subscribers_count}
‚Ä¢ –û—Ç–ø–∏—Å–∞–≤—à–∏—Ö—Å—è: {total_users - subscribers_count}
‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–¥–ø–∏—Å–æ–∫: {round(subscribers_count/total_users*100, 1) if total_users > 0 else 0}%

üë§ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>"""
        
        if recent_users:
            for user in recent_users:
                name = user['first_name'] or '–ë–µ–∑ –∏–º–µ–Ω–∏'
                username = f"@{user['username']}" if user['username'] else '–ù–µ—Ç username'
                status = "üîî" if user['is_subscribed'] else "üîï"
                joined = user['joined_at'].strftime('%d.%m.%Y') if user['joined_at'] else 'N/A'
                
                text += f"\n\n{status} <b>{name}</b> ({username})"
                text += f"\n   ID: <code>{user['user_id']}</code>"
                text += f"\n   –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è: {joined}"
        else:
            text += "\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        
        return text
    
    @staticmethod
    def database_info_message(stats) -> str:
        """–°–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ë–î"""
        return f"""üóÑÔ∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö</b>

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–î:</b>
‚Ä¢ üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {stats.get('users', 0)}
‚Ä¢ üéÅ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–¥–æ–≤: {stats.get('codes_active', 0)}
‚Ä¢ üì® –ó–∞–ø–∏—Å–µ–π —Å–æ–æ–±—â–µ–Ω–∏–π: {stats.get('messages', 0)}
‚Ä¢ üíæ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {stats.get('file_size', '0 KB')}

‚ö†Ô∏è <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:</b>
‚Ä¢ –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ –°–±—Ä–æ—Å–∏—Ç—å –ë–î (—É–¥–∞–ª–∏—Ç—å –∫–æ–¥—ã –∏ —Å–æ–æ–±—â–µ–Ω–∏—è, —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)"""


# –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@router.message(Command("admin"), AdminFilter())
async def admin_panel(message: Message):
    """–ì–ª–∞–≤–Ω–∞—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    welcome_text = MessageTemplates.welcome_message()
    
    await message.answer(
        welcome_text,
        parse_mode="HTML",
        reply_markup=get_admin_keyboard()
    )


# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–ë–ï–ó —Å–ø–∏—Å–∫–∞ –∫–æ–¥–æ–≤)
@router.callback_query(F.data == "admin_stats", AdminFilter())
async def admin_stats_callback(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞ –ë–ï–ó —Å–ø–∏—Å–∫–∞ –∫–æ–¥–æ–≤"""
    try:
        stats = await AdminService.get_admin_stats()
        stats_text = MessageTemplates.stats_message(stats)
        
        await MessageUtils.safe_edit_message(
            callback, stats_text, get_admin_stats_keyboard()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", show_alert=True)


# –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–¥—ã
@router.callback_query(F.data == "admin_active_codes", AdminFilter())
async def admin_active_codes_callback(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–¥—ã"""
    try:
        codes = await db.get_active_codes()
        codes_text = MessageTemplates.codes_list_message(codes)
        
        await MessageUtils.safe_edit_message(
            callback, codes_text, get_admin_codes_keyboard()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–¥–æ–≤: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–æ–≤", show_alert=True)


# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
@router.callback_query(F.data == "admin_users", AdminFilter())
async def admin_users_callback(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö"""
    try:
        total_users, subscribers_count, recent_users = await db.get_user_stats()
        users_text = MessageTemplates.users_info_message(total_users, subscribers_count, recent_users)
        
        await MessageUtils.safe_edit_message(
            callback, users_text, get_admin_users_keyboard()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", show_alert=True)


# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
@router.callback_query(F.data == "admin_database", AdminFilter())
async def admin_database_callback(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    try:
        stats = await db.get_database_stats()
        db_text = MessageTemplates.database_info_message(stats)
        
        await MessageUtils.safe_edit_message(
            callback, db_text, get_database_admin_keyboard()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ë–î: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ë–î", show_alert=True)


# –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –ë–î
@router.callback_query(F.data == "admin_download_db", AdminFilter())
async def download_db_callback(callback: CallbackQuery):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
    try:
        if not os.path.exists(db.db_path):
            await callback.message.edit_text(
                "‚ùå <b>–§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω!</b>",
                parse_mode="HTML",
                reply_markup=get_database_admin_keyboard()
            )
            await callback.answer()
            return
        
        file = FSInputFile(db.db_path, filename="genshin_codes.db")
        await callback.message.answer_document(
            document=file,
            caption="üì• <b>–§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö</b>\n\n–°–∫–∞—á–∞–Ω: " + 
                   DateTimeUtils.get_moscow_time().strftime('%d.%m.%Y %H:%M –ú–°–ö'),
            parse_mode="HTML"
        )
        
        await callback.message.edit_text(
            "‚úÖ <b>–§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!</b>",
            parse_mode="HTML",
            reply_markup=get_database_admin_keyboard()
        )
        
        logger.info(f"–§–∞–π–ª –ë–î –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {callback.from_user.id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ –ë–î: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞", show_alert=True)
    
    await callback.answer()


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞
@router.callback_query(F.data == "admin_add_code", AdminFilter())
async def add_code_callback(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–¥–∞"""
    add_code_text = """‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–º–æ-–∫–æ–¥–∞</b>

–û—Ç–ø—Ä–∞–≤—å –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–º–æ-–∫–æ–¥–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:

<code>–ö–û–î
–û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–¥–∞
–ù–∞–≥—Ä–∞–¥—ã
–î–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</code>

<b>–ü—Ä–∏–º–µ—Ä –±–µ–∑ –¥–∞—Ç—ã –∏—Å—Ç–µ—á–µ–Ω–∏—è:</b>
<code>GENSHINGIFT
–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—Ä–æ–º–æ-–∫–æ–¥
50 –ü—Ä–∏–º–æ–≥–µ–º–æ–≤ + 3 –ö–Ω–∏–≥–∏ –≥–µ—Ä–æ—è</code>

<b>–ü—Ä–∏–º–µ—Ä —Å –¥–∞—Ç–æ–π –∏—Å—Ç–µ—á–µ–Ω–∏—è:</b>
<code>LIMITEDCODE
–û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –ø—Ä–æ–º–æ-–∫–æ–¥
100 –ü—Ä–∏–º–æ–≥–µ–º–æ–≤ + 5 –ö–Ω–∏–≥ –≥–µ—Ä–æ—è
15.10.2025 23:59</code>

–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã"""

    await callback.message.edit_text(
        add_code_text,
        parse_mode="HTML",
        reply_markup=get_admin_back_keyboard()
    )
    
    await state.set_state(AdminStates.waiting_for_code_data)
    await callback.answer()


@router.message(AdminStates.waiting_for_code_data, AdminFilter())
async def process_new_code(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –∫–æ–¥–∞ –æ—Ç –∞–¥–º–∏–Ω–∞"""
    if message.text == "/cancel":
        await message.answer("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        await state.clear()
        return
    
    try:
        lines = message.text.strip().split('\n')
        validation = await AdminService.validate_code_data(lines)
        
        if not validation['valid']:
            await message.answer(validation['error'], parse_mode="HTML")
            return
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–æ–¥–∞
        new_code = CodeModel(
            code=validation['code'],
            description=validation['description'],
            rewards=validation['rewards'],
            expires_date=validation['expires_date']
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        code_id = await db.add_code(new_code)
        
        if code_id:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            confirmation_text = f"""‚úÖ <b>–ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!</b>

üî• <b>–ö–æ–¥:</b> <code>{validation['code']}</code>
üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {validation['description']}
üíé <b>–ù–∞–≥—Ä–∞–¥—ã:</b> {validation['rewards']}"""
            
            if validation['expires_date']:
                confirmation_text += f"\n‚è∞ <b>–ò—Å—Ç–µ–∫–∞–µ—Ç:</b> {DateTimeUtils.format_expiry_date(validation['expires_date'])}"
            
            confirmation_text += "\n\nüöÄ <b>–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º...</b>"
            
            await message.answer(confirmation_text, parse_mode="HTML")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º ID –∏ –¥–µ–ª–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
            new_code.id = code_id
            stats = await broadcast_new_code(bot, new_code)
            
            # –û—Ç—á–µ—Ç –æ —Ä–∞—Å—Å—ã–ª–∫–µ
            await message.answer(
                f"""üì¨ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>

üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b>
‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {stats['sent']}
‚Ä¢ –û—à–∏–±–æ–∫: {stats['failed']}
‚Ä¢ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: {stats['blocked']}""",
                parse_mode="HTML"
            )
            
        else:
            await message.answer(
                f"‚ùå <b>–û—à–∏–±–∫–∞!</b>\n\n–ö–æ–¥ <code>{validation['code']}</code> —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.",
                parse_mode="HTML"
            )
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–¥–∞: {e}")
        await message.answer(
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–¥–∞</b>\n\n–ü—Ä–æ–≤–µ—Ä—å —Ñ–æ—Ä–º–∞—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.",
            parse_mode="HTML"
        )
    
    await state.clear()


# –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –∫–æ–¥–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
@router.callback_query(F.data == "admin_expire_code", AdminFilter())
async def expire_code_callback(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–æ–¥–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
    codes = await db.get_active_codes()
    
    if not codes:
        await callback.message.edit_text(
            "ü§∑‚Äç‚ôÇÔ∏è <b>–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–¥–æ–≤ –¥–ª—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏</b>\n\n–î–æ–±–∞–≤—å –Ω–æ–≤—ã–µ –∫–æ–¥—ã —á–µ—Ä–µ–∑ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏.",
            parse_mode="HTML",
            reply_markup=get_admin_back_keyboard()
        )
        await callback.answer()
        return
    
    await callback.message.edit_text(
        f"""‚ùå <b>–î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ–º–æ-–∫–æ–¥–∞</b>

<b>–ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–¥–æ–≤: {len(codes)}</b>

üí° <i>–ù–∞–∂–º–∏ –Ω–∞ –∫–æ–¥ —Ç—Ä–∏–∂–¥—ã –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏</i>

–í—ã–±–µ—Ä–∏ –∫–æ–¥ –¥–ª—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏:""",
        parse_mode="HTML",
        reply_markup=get_admin_expire_codes_keyboard(codes)
    )
    
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ –ø–æ –∫–æ–¥–∞–º –¥–ª—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ (–¢–†–û–ô–ù–û–ô –ö–õ–ò–ö)
@router.callback_query(lambda c: c.data and c.data.startswith("expire_code_"), AdminFilter())
async def expire_code_click_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ –ø–æ –∫–æ–¥–∞–º (—Ç—Ä–æ–π–Ω–æ–π –∫–ª–∏–∫ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏)"""
    parts = callback.data.split("_")
    code = parts[2]
    click_count = int(parts[3]) if len(parts) > 3 else 1
    
    if click_count == 1:
        message_text = f"""‚ö†Ô∏è <b>–î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –∫–æ–¥–∞: {code}</b>

üî∏ <i>–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –µ—â–µ 2 —Ä–∞–∑–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</i>

üóëÔ∏è <b>–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ:</b>
‚Ä¢ –£–¥–∞–ª–∏—Ç –∫–æ–¥ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ –û–±–Ω–æ–≤–∏—Ç –≤—Å–µ —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ –°–¥–µ–ª–∞–µ—Ç –∫–æ–¥ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º –Ω–∞–≤—Å–µ–≥–¥–∞"""
    
    elif click_count == 2:
        message_text = f"""‚ö†Ô∏è <b>–î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –∫–æ–¥–∞: {code}</b>

üî∏üî∏ <i>–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –µ—â–µ 1 —Ä–∞–∑ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</i>

üóëÔ∏è <b>–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!</b>
‚Ä¢ –ö–æ–¥ –±—É–¥–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω
‚Ä¢ –í—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±–Ω–æ–≤—è—Ç—Å—è
‚Ä¢ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±—É–¥–µ—Ç –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ"""
    
    elif click_count >= 3:
        message_text = f"""‚ùå <b>–í–ù–ò–ú–ê–ù–ò–ï!</b>

–ö–æ–¥ <code>{code}</code> –≥–æ—Ç–æ–≤ –∫ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏!

üî∏üî∏üî∏ <i>–ù–∞–∂–º–∏ –∫—Ä–∞—Å–Ω—É—é –∫–Ω–æ–ø–∫—É –¥–ª—è –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è</i>"""
    
    else:
        message_text = f"–í—ã–±–µ—Ä–∏ –∫–æ–¥ –¥–ª—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏:"
    
    await callback.message.edit_text(
        message_text,
        parse_mode="HTML",
        reply_markup=get_expire_code_click_keyboard(code, click_count)
    )
    
    await callback.answer("üî∏ –ö–ª–∏–∫ –∑–∞—Å—á–∏—Ç–∞–Ω" if click_count < 3 else "‚ö†Ô∏è –ì–æ—Ç–æ–≤ –∫ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏!")


# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–æ–¥–∞ (–ø–æ—Å–ª–µ 3 –∫–ª–∏–∫–æ–≤)
@router.callback_query(lambda c: c.data and c.data.startswith("confirm_expire_"), AdminFilter())
async def confirm_expire_code(callback: CallbackQuery, bot: Bot):
    """–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –∫–æ–¥–∞ –ø–æ—Å–ª–µ —Ç—Ä–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞"""
    code = callback.data.replace("confirm_expire_", "")
    
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ü–ï–†–ï–î —É–¥–∞–ª–µ–Ω–∏–µ–º –∫–æ–¥–∞
        await update_expired_code_messages(bot, code)
        
        # –£–¥–∞–ª—è–µ–º –∫–æ–¥
        success = await db.expire_code(code)
        
        if success:
            await callback.message.edit_text(
                f"""‚úÖ <b>–ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!</b>

üóëÔ∏è <b>–ö–æ–¥:</b> <code>{code}</code>
üîÑ <b>–°—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:</b> –û–±–Ω–æ–≤–ª–µ–Ω—ã
üìä <b>–°—Ç–∞—Ç—É—Å:</b> –ü–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö""",
                parse_mode="HTML",
                reply_markup=get_admin_back_keyboard()
            )
            
            logger.info(f"–ö–æ–¥ {code} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {callback.from_user.id}")
        else:
            await callback.message.edit_text(
                f"‚ùå <b>–û—à–∏–±–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏!</b>\n\n–ö–æ–¥ <code>{code}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.",
                parse_mode="HTML",
                reply_markup=get_admin_back_keyboard()
            )
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–æ–¥–∞ {code}: {e}")
        await callback.message.edit_text(
            f"‚ùå <b>–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞!</b>\n\n–ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ <code>{code}</code>.",
            parse_mode="HTML",
            reply_markup=get_admin_back_keyboard()
        )
    
    await callback.answer()


# –°–±—Ä–æ—Å –ë–î —Å —Ç—Ä–æ–π–Ω—ã–º –∫–ª–∏–∫–æ–º
@router.callback_query(F.data == "admin_reset_db", AdminFilter())
async def reset_db_callback(callback: CallbackQuery):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Å–±—Ä–æ—Å–∞ –ë–î —Å —Ç—Ä–æ–π–Ω—ã–º –∫–ª–∏–∫–æ–º"""
    await callback.message.edit_text(
        """üóÑÔ∏è <b>–°–±—Ä–æ—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö</b>

‚ö†Ô∏è <b>–≠—Ç–æ –∫—Ä–∏—Ç–∏—á–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ!</b>

üí° <i>–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É —Ç—Ä–∏–∂–¥—ã –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</i>

üóëÔ∏è <b>–ë—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ:</b>
‚Ä¢ –í—Å–µ –ø—Ä–æ–º–æ-–∫–æ–¥—ã
‚Ä¢ –í—Å–µ –∑–∞–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏–π

üíæ <b>–ë—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ:</b>
‚Ä¢ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏""",
        parse_mode="HTML",
        reply_markup=get_reset_db_click_keyboard(0)
    )
    
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ –ø–æ –∫–Ω–æ–ø–∫–µ —Å–±—Ä–æ—Å–∞ –ë–î (–¢–†–û–ô–ù–û–ô –ö–õ–ò–ö)
@router.callback_query(lambda c: c.data and c.data.startswith("reset_click_"), AdminFilter())
async def reset_db_click_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ –ø–æ –∫–Ω–æ–ø–∫–µ —Å–±—Ä–æ—Å–∞ –ë–î (—Ç—Ä–æ–π–Ω–æ–π –∫–ª–∏–∫ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏)"""
    click_count = int(callback.data.replace("reset_click_", ""))
    
    if click_count == 1:
        message_text = """üóÑÔ∏è <b>–°–±—Ä–æ—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö</b>

üî∏ <i>–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –µ—â–µ 2 —Ä–∞–∑–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</i>

‚ö†Ô∏è <b>–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ:</b>
‚Ä¢ –í—Å–µ –ø—Ä–æ–º–æ-–∫–æ–¥—ã –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã
‚Ä¢ –í—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –æ—á–∏—â–µ–Ω—ã
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ—Å—Ç–∞–Ω—É—Ç—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ"""
    
    elif click_count == 2:
        message_text = """üóÑÔ∏è <b>–°–±—Ä–æ—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö</b>

üî∏üî∏ <i>–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –µ—â–µ 1 —Ä–∞–∑ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</i>

‚ùå <b>–ü–û–°–õ–ï–î–ù–ï–ï –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï:</b>
‚Ä¢ –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –ù–ï–û–ë–†–ê–¢–ò–ú–û
‚Ä¢ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–¥–æ–≤ –±—É–¥—É—Ç –ø–æ—Ç–µ—Ä—è–Ω—ã
‚Ä¢ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±—É–¥–µ—Ç –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ"""
    
    elif click_count >= 3:
        message_text = """‚ùå <b>–í–ù–ò–ú–ê–ù–ò–ï!</b>

–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞ –∫ —Å–±—Ä–æ—Å—É!

üî∏üî∏üî∏ <i>–ù–∞–∂–º–∏ –∫—Ä–∞—Å–Ω—É—é –∫–Ω–æ–ø–∫—É –¥–ª—è –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞</i>

üíÄ <b>–í—Å–µ –∫–æ–¥—ã –±—É–¥—É—Ç —É–Ω–∏—á—Ç–æ–∂–µ–Ω—ã –Ω–∞–≤—Å–µ–≥–¥–∞!</b>"""
    
    await callback.message.edit_text(
        message_text,
        parse_mode="HTML",
        reply_markup=get_reset_db_click_keyboard(click_count)
    )
    
    await callback.answer("üî∏ –ö–ª–∏–∫ –∑–∞—Å—á–∏—Ç–∞–Ω" if click_count < 3 else "üíÄ –ë–∞–∑–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Å–±—Ä–æ—Å—É!")


# –û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–π —Å–±—Ä–æ—Å –ë–î (–ø–æ—Å–ª–µ 3 –∫–ª–∏–∫–æ–≤)
@router.callback_query(F.data == "confirm_reset_db", AdminFilter())
async def confirm_reset_db(callback: CallbackQuery):
    """–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–π —Å–±—Ä–æ—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ —Ç—Ä–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞"""
    try:
        success = await db.reset_database()
        
        if success:
            await callback.message.edit_text(
                """‚úÖ <b>–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω–∞!</b>

üóëÔ∏è <b>–£–¥–∞–ª–µ–Ω–æ:</b>
‚Ä¢ –í—Å–µ –ø—Ä–æ–º–æ-–∫–æ–¥—ã
‚Ä¢ –í—Å–µ –∑–∞–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏–π

üíæ <b>–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ:</b>
‚Ä¢ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏

üéØ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ —Å —á–∏—Å—Ç–æ–π –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.""",
                parse_mode="HTML",
                reply_markup=get_admin_back_keyboard()
            )
            logger.info(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–±—Ä–æ—à–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {callback.from_user.id}")
        else:
            await callback.message.edit_text(
                "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!</b>\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.",
                parse_mode="HTML",
                reply_markup=get_admin_back_keyboard()
            )
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –ë–î: {e}")
        await callback.message.edit_text(
            f"‚ùå <b>–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ!</b>\n\n–î–µ—Ç–∞–ª–∏: {str(e)}",
            parse_mode="HTML",
            reply_markup=get_admin_back_keyboard()
        )
    
    await callback.answer()


# –ö–∞—Å—Ç–æ–º–Ω—ã–π –ø–æ—Å—Ç - –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù –ü–û–õ–ù–û–°–¢–¨–Æ
@router.callback_query(F.data == "admin_custom_post", AdminFilter())
async def custom_post_callback(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø–æ—Å—Ç–∞"""
    await callback.message.edit_text(
        """üì¢ <b>–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –ø–æ—Å—Ç–∞</b>

–û—Ç–ø—Ä–∞–≤—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ—Å—Ç–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:

<code>–ó–∞–≥–æ–ª–æ–≤–æ–∫
–¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞
–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
–°—Å—ã–ª–∫–∞ –∫–Ω–æ–ø–∫–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</code>

<b>–ü—Ä–∏–º–µ—Ä –±–µ–∑ –∫–Ω–æ–ø–∫–∏:</b>
<code>üéÆ –ù–æ–≤–æ—Å—Ç—å!
–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ 4.2 —É–∂–µ –≤ –∏–≥—Ä–µ!</code>

<b>–ü—Ä–∏–º–µ—Ä —Å –∫–Ω–æ–ø–∫–æ–π:</b>
<code>üõí –ú–∞–≥–∞–∑–∏–Ω
–°–∫–∏–¥–∫–∏ –Ω–∞ –ø—Ä–∏–º–æ–≥–µ–º—ã!
–ö—É–ø–∏—Ç—å —Å–µ–π—á–∞—Å
https://example.com</code>

–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã""",
        parse_mode="HTML",
        reply_markup=get_admin_back_keyboard()
    )
    
    await state.set_state(AdminStates.waiting_for_custom_post_data)
    await callback.answer()


@router.message(AdminStates.waiting_for_custom_post_data, AdminFilter())
async def process_custom_post_data(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø–æ—Å—Ç–∞"""
    if message.text == "/cancel":
        await message.answer("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        await state.clear()
        return
    
    try:
        lines = message.text.strip().split('\n')
        validation = await AdminService.validate_custom_post_data(lines)
        
        if not validation['valid']:
            await message.answer(validation['error'], parse_mode="HTML")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        await state.update_data({
            'title': validation['title'],
            'text': validation['text'],
            'button_text': validation['button_text'],
            'button_url': validation['button_url']
        })
        
        await message.answer(
            """üì∏ <b>–û—Ç–ª–∏—á–Ω–æ!</b>

–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ—Å—Ç–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å /skip —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.

–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.""",
            parse_mode="HTML"
        )
        
        await state.set_state(AdminStates.waiting_for_custom_post_image)
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞: {e}")
        await message.answer(
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö</b>\n\n–ü—Ä–æ–≤–µ—Ä—å —Ñ–æ—Ä–º–∞—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.",
            parse_mode="HTML"
        )


@router.message(AdminStates.waiting_for_custom_post_image, AdminFilter())
async def process_custom_post_image(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ –∏ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞"""
    if message.text == "/cancel":
        await message.answer("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        await state.clear()
        return
    
    data = await state.get_data()
    image_file_id = None
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–ø—Ä–∞–≤–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É skip
    if message.photo:
        # –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–∏–≤—ã—Å—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
        photo: PhotoSize = message.photo[-1]
        image_file_id = photo.file_id
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ—Å—Ç–∞: {image_file_id}")
    elif message.text == "/skip":
        logger.info("–ü–æ—Å—Ç —Å–æ–∑–¥–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    else:
        await message.answer(
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!</b>\n\n–û—Ç–ø—Ä–∞–≤—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞.",
            parse_mode="HTML"
        )
        return
    
    try:
        await message.answer(
            f"""‚úÖ <b>–ü–æ—Å—Ç –≥–æ—Ç–æ–≤ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ!</b>

üì¢ <b>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</b> {data['title']}
üìù <b>–¢–µ–∫—Å—Ç:</b> {data['text']}
üì∏ <b>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:</b> {'–î–∞' if image_file_id else '–ù–µ—Ç'}
üîó <b>–ö–Ω–æ–ø–∫–∞:</b> {data.get('button_text') if data.get('button_text') else '–ù–µ—Ç'}

üöÄ <b>–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...</b>""",
            parse_mode="HTML"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
        stats = await broadcast_custom_post(bot, data, image_file_id, message.from_user.id)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞: {e}")
        await message.answer(
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞</b>\n\n–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.",
            parse_mode="HTML"
        )
    
    await state.clear()


# –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@router.callback_query(F.data == "admin_back", AdminFilter())
async def admin_back_callback(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞"""
    await state.clear()
    
    welcome_text = MessageTemplates.welcome_message()
    
    await MessageUtils.safe_edit_message(
        callback, welcome_text, get_admin_keyboard()
    )


# –û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è
@router.message(Command("cancel"), AdminFilter())
async def cancel_admin_action(message: Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –∞–¥–º–∏–Ω-–¥–µ–π—Å—Ç–≤–∏—è"""
    await state.clear()
    await message.answer(
        "‚ùå <b>–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ</b>",
        parse_mode="HTML"
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏—Å—Ç–µ–∫—à–∏—Ö –∫–æ–¥–æ–≤
@router.callback_query(F.data == "expired_code")
async def expired_code_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∏—Å—Ç–µ–∫—à–∏–µ –∫–æ–¥—ã"""
    await callback.answer(
        "‚åõ –≠—Ç–æ—Ç –ø—Ä–æ–º–æ-–∫–æ–¥ –±–æ–ª—å—à–µ –Ω–µ –¥–µ–π—Å—Ç–≤—É–µ—Ç. –°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤—ã–º–∏ –∫–æ–¥–∞–º–∏!",
        show_alert=True
    )