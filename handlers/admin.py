from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, PhotoSize, FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram import Bot

from database import db
from models import CodeModel
from filters.admin_filter import AdminFilter
from keyboards.inline import (
    get_admin_keyboard, get_code_activation_keyboard, 
    get_database_admin_keyboard, get_custom_post_keyboard,
    get_custom_post_with_button_keyboard
)
from utils.date_utils import parse_expiry_date, format_expiry_date
from datetime import datetime
import asyncio
import logging
import os
import aiosqlite
from typing import Optional

logger = logging.getLogger(__name__)

router = Router()

class AdminStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    waiting_for_code_data = State()
    waiting_for_code_to_expire = State()
    waiting_for_custom_post_data = State()
    waiting_for_custom_post_image = State()
    waiting_for_db_reset_confirmation = State()  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–±—Ä–æ—Å–∞

@router.message(Command("admin"), AdminFilter())
async def admin_panel(message: Message):
    """–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    admin_text = """
üîß <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –±–æ—Ç–∞ Genshin Impact –∫–æ–¥–æ–≤</b>

üëã –ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!

üìä <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:</b>
‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–º–æ-–∫–æ–¥
‚Ä¢ –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ç–µ–∫—à–∏–π –∫–æ–¥
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞
‚Ä¢ –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–¥—ã
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
‚Ä¢ –°–æ–∑–¥–∞—Ç—å —Ä–µ–∫–ª–∞–º–Ω—ã–π –ø–æ—Å—Ç
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö

–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:
"""
    
    await message.answer(
        admin_text,
        parse_mode="HTML",
        reply_markup=get_admin_keyboard()
    )

@router.callback_query(lambda c: c.data == "admin_add_code", AdminFilter())
async def add_code_callback(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–¥–∞"""
    await callback.message.edit_text(
        "‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–º–æ-–∫–æ–¥–∞</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–º–æ-–∫–æ–¥–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
        "<code>–ö–û–î\n"
        "–û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–¥–∞\n"
        "–ù–∞–≥—Ä–∞–¥—ã\n"
        "–î–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</code>\n\n"
        "<b>–ü—Ä–∏–º–µ—Ä –±–µ–∑ –¥–∞—Ç—ã –∏—Å—Ç–µ—á–µ–Ω–∏—è:</b>\n"
        "<code>GENSHINGIFT\n"
        "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—Ä–æ–º–æ-–∫–æ–¥\n"
        "50 –ü—Ä–∏–º–æ–≥–µ–º–æ–≤ + 3 –ö–Ω–∏–≥–∏ –≥–µ—Ä–æ—è</code>\n\n"
        "<b>–ü—Ä–∏–º–µ—Ä —Å –¥–∞—Ç–æ–π –∏—Å—Ç–µ—á–µ–Ω–∏—è:</b>\n"
        "<code>LIMITEDCODE\n"
        "–û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –ø—Ä–æ–º–æ-–∫–æ–¥\n"
        "100 –ü—Ä–∏–º–æ–≥–µ–º–æ–≤ + 5 –ö–Ω–∏–≥ –≥–µ—Ä–æ—è\n"
        "15.10.2025 23:59</code>\n\n"
        "–§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú –∏–ª–∏ –î–î.–ú–ú.–ì–ì–ì–ì\n\n"
        "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã",
        parse_mode="HTML"
    )
    
    await state.set_state(AdminStates.waiting_for_code_data)
    await callback.answer()

@router.message(AdminStates.waiting_for_code_data, AdminFilter())
async def process_new_code(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –∫–æ–¥–∞ –æ—Ç –∞–¥–º–∏–Ω–∞"""
    if message.text == "/cancel":
        await message.answer("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        await state.clear()
        return
    
    try:
        lines = message.text.strip().split('\n')
        if len(lines) < 3:
            await message.answer(
                "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!</b>\n\n"
                "–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 3 —Å—Ç—Ä–æ–∫–∏:\n"
                "1. –ö–æ–¥\n"
                "2. –û–ø–∏—Å–∞–Ω–∏–µ\n"
                "3. –ù–∞–≥—Ä–∞–¥—ã\n"
                "4. –î–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)",
                parse_mode="HTML"
            )
            return
        
        code = lines[0].strip().upper()
        description = lines[1].strip()
        rewards = lines[2].strip()
        expires_date = None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∫–∞–∑–∞–Ω–∞ –ª–∏ –¥–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è
        if len(lines) > 3:
            expires_date = parse_expiry_date(lines[3])
            if lines[3].strip() and not expires_date:
                await message.answer(
                    "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!</b>\n\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç:\n"
                    "‚Ä¢ <code>15.10.2025 23:59</code> (—Å –≤—Ä–µ–º–µ–Ω–µ–º)\n"
                    "‚Ä¢ <code>15.10.2025</code> (–±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏, –∏—Å—Ç–µ—á–µ—Ç –≤ 23:59 –ú–°–ö)",
                    parse_mode="HTML"
                )
                return
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–æ–¥–∞
        new_code = CodeModel(
            code=code,
            description=description,
            rewards=rewards,
            expires_date=expires_date
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        code_id = await db.add_code(new_code)
        
        if code_id:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            confirmation_text = (
                f"‚úÖ <b>–ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n"
                f"üî• <b>–ö–æ–¥:</b> <code>{code}</code>\n"
                f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description}\n"
                f"üíé <b>–ù–∞–≥—Ä–∞–¥—ã:</b> {rewards}"
            )
            
            if expires_date:
                confirmation_text += f"\n‚è∞ <b>–ò—Å—Ç–µ–∫–∞–µ—Ç:</b> {format_expiry_date(expires_date)}"
            
            await message.answer(confirmation_text, parse_mode="HTML")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç —Å ID –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
            new_code.id = code_id
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
            await broadcast_new_code(bot, new_code)
            
        else:
            await message.answer(
                f"‚ùå <b>–û—à–∏–±–∫–∞!</b>\n\n"
                f"–ö–æ–¥ <code>{code}</code> —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.",
                parse_mode="HTML"
            )
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–¥–∞: {e}")
        await message.answer(
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–¥–∞</b>\n\n"
            "–ü—Ä–æ–≤–µ—Ä—å —Ñ–æ—Ä–º–∞—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.",
            parse_mode="HTML"
        )
    
    await state.clear()

@router.callback_query(lambda c: c.data == "admin_database", AdminFilter())
async def admin_database_callback(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    stats = await db.get_database_stats()
    
    db_text = f"""
üóÑÔ∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö</b>

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–î:</b>
‚Ä¢ üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {stats.get('users', 0)}
‚Ä¢ üéÅ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–¥–æ–≤: {stats.get('codes_active', 0)}
‚Ä¢ üì® –ó–∞–ø–∏—Å–µ–π —Å–æ–æ–±—â–µ–Ω–∏–π: {stats.get('messages', 0)}
‚Ä¢ üíæ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {stats.get('file_size', '0 KB')}

‚ö†Ô∏è <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:</b>
‚Ä¢ –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ –°–±—Ä–æ—Å–∏—Ç—å –ë–î (—É–¥–∞–ª–∏—Ç—å –∫–æ–¥—ã –∏ —Å–æ–æ–±—â–µ–Ω–∏—è, —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
"""
    
    await callback.message.edit_text(
        db_text,
        parse_mode="HTML",
        reply_markup=get_database_admin_keyboard()
    )
    await callback.answer()

@router.callback_query(lambda c: c.data == "admin_download_db", AdminFilter())
async def download_db_callback(callback: CallbackQuery):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
    try:
        if not os.path.exists(db.db_path):
            await callback.message.edit_text(
                "‚ùå <b>–§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω!</b>",
                parse_mode="HTML",
                reply_markup=get_database_admin_keyboard()
            )
            await callback.answer()
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        file = FSInputFile(db.db_path, filename="genshin_codes.db")
        await callback.message.answer_document(
            document=file,
            caption="üì• <b>–§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö</b>\n\n–°–∫–∞—á–∞–Ω: " + datetime.now().strftime('%d.%m.%Y %H:%M –ú–°–ö'),
            parse_mode="HTML"
        )
        
        await callback.message.edit_text(
            "‚úÖ <b>–§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!</b>",
            parse_mode="HTML",
            reply_markup=get_database_admin_keyboard()
        )
        
        logger.info(f"–§–∞–π–ª –ë–î –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {callback.from_user.id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ –ë–î: {e}")
        await callback.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞!</b>\n\n"
            f"–î–µ—Ç–∞–ª–∏: {str(e)}",
            parse_mode="HTML",
            reply_markup=get_database_admin_keyboard()
        )
    
    await callback.answer()

@router.callback_query(lambda c: c.data == "admin_reset_db", AdminFilter())
async def reset_db_callback(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Å–±—Ä–æ—Å–∞ –ë–î —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º"""
    await callback.message.edit_text(
        "‚ö†Ô∏è <b>–í–ù–ò–ú–ê–ù–ò–ï!</b>\n\n"
        "–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å —Å–±—Ä–æ—Å–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!\n\n"
        "üóëÔ∏è <b>–ë—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ:</b>\n"
        "‚Ä¢ –í—Å–µ –ø—Ä–æ–º–æ-–∫–æ–¥—ã\n"
        "‚Ä¢ –í—Å–µ –∑–∞–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏–π\n\n"
        "üíæ <b>–ë—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ:</b>\n"
        "‚Ä¢ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏\n\n"
        "üîê <b>–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É:</b>\n"
        "<code>/confirm_reset_db</code>\n\n"
        "‚è∞ <i>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤—É–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç</i>\n\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏ '–ù–∞–∑–∞–¥'",
        parse_mode="HTML",
        reply_markup=get_database_admin_keyboard()
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    await state.set_state(AdminStates.waiting_for_db_reset_confirmation)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–∞ 5 –º–∏–Ω—É—Ç
    await asyncio.sleep(300)  # 5 –º–∏–Ω—É—Ç
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–º–µ–Ω–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–ø–µ—Ä–∞—Ü–∏—é
    current_state = await state.get_state()
    if current_state == AdminStates.waiting_for_db_reset_confirmation:
        await state.clear()
        logger.info(f"–í—Ä–µ–º—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–±—Ä–æ—Å–∞ –ë–î –∏—Å—Ç–µ–∫–ª–æ –¥–ª—è –∞–¥–º–∏–Ω–∞ {callback.from_user.id}")
    
    await callback.answer()

@router.message(Command("confirm_reset_db"), AdminFilter())
async def confirm_reset_db(message: Message, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–±—Ä–æ—Å–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–¢–û–õ–¨–ö–û –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞ –≤ –º–µ–Ω—é!)"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –∞–¥–º–∏–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    current_state = await state.get_state()
    
    if current_state != AdminStates.waiting_for_db_reset_confirmation.state:
        await message.answer(
            "‚ùå <b>–ö–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞!</b>\n\n"
            "–î–ª—è —Å–±—Ä–æ—Å–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:\n"
            "1. –ó–∞–π–¥–∏ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å (/admin)\n"
            "2. –í—ã–±–µ—Ä–∏ '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö'\n"
            "3. –ù–∞–∂–º–∏ '–°–±—Ä–æ—Å–∏—Ç—å –ë–î'\n"
            "4. –¢–æ–ª—å–∫–æ —Ç–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π —ç—Ç—É –∫–æ–º–∞–Ω–¥—É",
            parse_mode="HTML"
        )
        return
    
    try:
        success = await db.reset_database()
        
        if success:
            await message.answer(
                "‚úÖ <b>–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω–∞!</b>\n\n"
                "üóëÔ∏è <b>–£–¥–∞–ª–µ–Ω–æ:</b>\n"
                "‚Ä¢ –í—Å–µ –ø—Ä–æ–º–æ-–∫–æ–¥—ã\n"
                "‚Ä¢ –í—Å–µ –∑–∞–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏–π\n\n"
                "üíæ <b>–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ:</b>\n"
                "‚Ä¢ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏\n\n"
                "–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ —Å —á–∏—Å—Ç–æ–π –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.",
                parse_mode="HTML",
                reply_markup=get_admin_keyboard()
            )
            logger.info(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–±—Ä–æ—à–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {message.from_user.id}")
        else:
            await message.answer(
                "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!</b>\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.",
                parse_mode="HTML"
            )
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –ë–î: {e}")
        await message.answer(
            "‚ùå <b>–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ!</b>\n\n"
            f"–î–µ—Ç–∞–ª–∏: {str(e)}",
            parse_mode="HTML"
        )
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    await state.clear()

@router.callback_query(lambda c: c.data == "admin_back", AdminFilter())
async def admin_back_callback(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞"""
    # –û—á–∏—â–∞–µ–º –ª—é–±—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await state.clear()
    
    await callback.message.edit_text(
        "üîß <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –±–æ—Ç–∞ Genshin Impact –∫–æ–¥–æ–≤</b>\n\n"
        "üëã –ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!\n\n"
        "üìä <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:</b>\n"
        "‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–º–æ-–∫–æ–¥\n"
        "‚Ä¢ –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ç–µ–∫—à–∏–π –∫–æ–¥\n"
        "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞\n"
        "‚Ä¢ –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–¥—ã\n"
        "‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏\n"
        "‚Ä¢ –°–æ–∑–¥–∞—Ç—å —Ä–µ–∫–ª–∞–º–Ω—ã–π –ø–æ—Å—Ç\n"
        "‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö\n\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
        parse_mode="HTML",
        reply_markup=get_admin_keyboard()
    )
    await callback.answer()

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
@router.message(Command("cancel"), AdminFilter())
async def cancel_admin_action(message: Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –∞–¥–º–∏–Ω-–¥–µ–π—Å—Ç–≤–∏—è"""
    await state.clear()
    await message.answer(
        "‚ùå <b>–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ</b>",
        parse_mode="HTML",
        reply_markup=get_admin_keyboard()
    )

# –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω–∫–∏ (—Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–µ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞)
@router.callback_query(lambda c: c.data == "admin_stats", AdminFilter())
async def admin_stats_callback(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞"""
    try:
        active_codes = await db.get_active_codes()
        active_count = len(active_codes)
        
        total_users, subscribers_count, _ = await db.get_user_stats()
        
        stats_text = f"""
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>

üéÅ <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–º–æ-–∫–æ–¥—ã:</b> {active_count}
üë• <b>–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {total_users}
üîî <b>–ü–æ–¥–ø–∏—Å—á–∏–∫–∏:</b> {subscribers_count}
üìÖ <b>–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:</b> {datetime.now().strftime('%d.%m.%Y %H:%M –ú–°–ö')}

<b>–ê–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–¥—ã:</b>
"""
        
        if active_codes:
            for code in active_codes:
                created = code.created_at.strftime('%d.%m') if code.created_at else 'N/A'
                expires = format_expiry_date(code.expires_date) if code.expires_date else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
                stats_text += f"‚Ä¢ <code>{code.code}</code> (–¥–æ–±–∞–≤–ª–µ–Ω {created}, –∏—Å—Ç–µ–∫–∞–µ—Ç {expires})\n"
        else:
            stats_text += "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–¥–æ–≤\n"
        
        await callback.message.edit_text(
            stats_text,
            parse_mode="HTML",
            reply_markup=get_admin_keyboard()
        )
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
            reply_markup=get_admin_keyboard()
        )
    
    await callback.answer()

# Placeholder —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ (–Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–Ω—ã–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏)
async def broadcast_new_code(bot: Bot, code: CodeModel):
    """Placeholder - –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–Ω—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é"""
    pass

@router.callback_query(lambda c: c.data == "expired_code")
async def expired_code_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∏—Å—Ç–µ–∫—à–∏–µ –∫–æ–¥—ã"""
    await callback.answer(
        "‚åõ –≠—Ç–æ—Ç –ø—Ä–æ–º–æ-–∫–æ–¥ –±–æ–ª—å—à–µ –Ω–µ –¥–µ–π—Å—Ç–≤—É–µ—Ç. –°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤—ã–º–∏ –∫–æ–¥–∞–º–∏!",
        show_alert=True
    )