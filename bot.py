import asyncio
import logging
import sys
from datetime import datetime, timedelta
from typing import List, Optional
import pytz

from aiogram import Bot, Dispatcher, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.exceptions import TelegramBadRequest, TelegramForbiddenError
from aiogram.filters import Command, CommandStart, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from config import config
from database import Database, User, PromoCode
from scheduler import PromoScheduler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler(sys.stdout)
    ]
)

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class AdminStates(StatesGroup):
    waiting_for_promo_code = State()
    waiting_for_promo_description = State()
    waiting_for_promo_expiry = State()
    waiting_for_ad_title = State()
    waiting_for_ad_content = State()
    waiting_for_db_reset_confirm = State()

class GenshinPromoBot:
    def __init__(self):
        self.bot = Bot(
            token=config.BOT_TOKEN,
            default=DefaultBotProperties(parse_mode=ParseMode.MARKDOWN)
        )
        self.dp = Dispatcher(storage=MemoryStorage())
        self.db = Database(config.DATABASE_PATH)
        self.scheduler = PromoScheduler(self.bot, self.db)
        self.timezone = pytz.timezone(config.TIMEZONE)

        # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
        self.temp_promo_data = {}

        self.setup_handlers()

    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
        self.dp.message.register(self.cmd_start, CommandStart())
        self.dp.message.register(self.cmd_help, Command("help"))

        # –ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥—ã
        self.dp.message.register(self.cmd_admin, Command("admin"), self.is_admin)

        # Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.dp.callback_query.register(self.handle_subscribe, F.data == "subscribe")
        self.dp.callback_query.register(self.handle_unsubscribe, F.data == "unsubscribe") 
        self.dp.callback_query.register(self.handle_admin_menu, F.data == "admin_menu")

        # –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å callbacks
        self.dp.callback_query.register(self.handle_add_promo, F.data == "add_promo", self.is_admin_callback)
        self.dp.callback_query.register(self.handle_view_codes, F.data == "view_codes", self.is_admin_callback)
        self.dp.callback_query.register(self.handle_statistics, F.data == "statistics", self.is_admin_callback)
        self.dp.callback_query.register(self.handle_broadcast_ad, F.data == "broadcast_ad", self.is_admin_callback)
        self.dp.callback_query.register(self.handle_db_management, F.data == "db_management", self.is_admin_callback)
        self.dp.callback_query.register(self.handle_back_to_admin, F.data == "back_to_admin", self.is_admin_callback)

        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏
        self.dp.callback_query.register(self.handle_deactivate_code, F.data.startswith("deactivate_"), self.is_admin_callback)
        self.dp.callback_query.register(self.handle_confirm_deactivate, F.data.startswith("confirm_deactivate_"), self.is_admin_callback)

        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ë–î
        self.dp.callback_query.register(self.handle_reset_db, F.data == "reset_db", self.is_admin_callback)
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: —É–±—Ä–∞–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –º–µ—Ç–æ–¥–∞ handle_confirm_reset

        # FSM –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.dp.message.register(self.process_promo_code, StateFilter(AdminStates.waiting_for_promo_code), self.is_admin)
        self.dp.message.register(self.process_promo_description, StateFilter(AdminStates.waiting_for_promo_description), self.is_admin)
        self.dp.message.register(self.process_promo_expiry, StateFilter(AdminStates.waiting_for_promo_expiry), self.is_admin)
        self.dp.message.register(self.process_ad_title, StateFilter(AdminStates.waiting_for_ad_title), self.is_admin)
        self.dp.message.register(self.process_ad_content, StateFilter(AdminStates.waiting_for_ad_content), self.is_admin)
        self.dp.message.register(self.process_db_reset_confirm, StateFilter(AdminStates.waiting_for_db_reset_confirm), self.is_admin)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ —Å –∫–Ω–æ–ø–∫–∏
        self.dp.callback_query.register(self.handle_redeem_promo, F.data.startswith("redeem_"))

    # –§–∏–ª—å—Ç—Ä—ã
    async def is_admin(self, message: Message) -> bool:
        return message.from_user.id in config.ADMIN_IDS

    async def is_admin_callback(self, callback: CallbackQuery) -> bool:
        return callback.from_user.id in config.ADMIN_IDS

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä
    def get_main_keyboard(self, user_subscribed: bool = False) -> InlineKeyboardMarkup:
        builder = InlineKeyboardBuilder()

        if user_subscribed:
            builder.button(text="‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è", callback_data="unsubscribe")
        else:
            builder.button(text="üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", callback_data="subscribe")

        builder.adjust(1)
        return builder.as_markup()

    def get_admin_keyboard(self) -> InlineKeyboardMarkup:
        builder = InlineKeyboardBuilder()

        builder.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="add_promo")
        builder.button(text="üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã", callback_data="view_codes") 
        builder.button(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="statistics")
        builder.button(text="üì¢ –†–µ–∫–ª–∞–º–∞", callback_data="broadcast_ad")
        builder.button(text="üóÉÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ë–î", callback_data="db_management")

        builder.adjust(1)
        return builder.as_markup()

    def get_back_keyboard(self) -> InlineKeyboardMarkup:
        builder = InlineKeyboardBuilder()
        builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin")
        return builder.as_markup()

    def get_promo_keyboard(self, promo_code: str) -> InlineKeyboardMarkup:
        builder = InlineKeyboardBuilder()

        # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
        redeem_url = f"https://genshin.hoyoverse.com/en/gift?code={promo_code}"
        builder.button(text="üéÅ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥", url=redeem_url)
        builder.button(text="üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥", callback_data=f"redeem_{promo_code}")

        builder.adjust(1)
        return builder.as_markup()

    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
    async def cmd_start(self, message: Message):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        user = self.db.add_user(
            user_id=message.from_user.id,
            username=message.from_user.username,
            first_name=message.from_user.first_name
        )

        keyboard = self.get_main_keyboard(user.is_subscribed)

        await message.answer(
            config.WELCOME_MESSAGE,
            reply_markup=keyboard
        )

    async def cmd_help(self, message: Message):
        """–ö–æ–º–∞–Ω–¥–∞ /help"""
        help_text = """
ü§ñ **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**

üë§ **–î–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:**
/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
/help - –°–ø—Ä–∞–≤–∫–∞

üëë **–î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:**
/admin - –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å

‚ÑπÔ∏è **–û –±–æ—Ç–µ:**
–≠—Ç–æ—Ç –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –æ –Ω–æ–≤—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–∞—Ö Genshin Impact.
–ü—Ä–∏ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –∫–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è.

üí° **–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**
1. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É
2. –ü–æ–ª—É—á–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–∞—Ö
3. –ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –∫–æ–¥—ã —á–µ—Ä–µ–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç

üîó **–ü–æ–¥–¥–µ—Ä–∂–∫–∞:** @your_support_username
        """

        await message.answer(help_text)

    async def cmd_admin(self, message: Message):
        """–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"""
        stats = self.db.get_statistics()
        admin_text = f"""
üëë **–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å**

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}
‚Ä¢ –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {stats['subscribed_users']}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤: {stats['active_codes']}
‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤: {stats['total_codes']}
‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {stats['sent_messages']}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
        """

        keyboard = self.get_admin_keyboard()
        await message.answer(admin_text, reply_markup=keyboard)

    # Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    async def handle_subscribe(self, callback: CallbackQuery):
        """–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É"""
        user_id = callback.from_user.id

        if self.db.subscribe_user(user_id):
            text = config.SUBSCRIBE_SUCCESS
        else:
            text = config.ALREADY_SUBSCRIBED

        user = self.db.get_user(user_id)
        keyboard = self.get_main_keyboard(user.is_subscribed if user else False)

        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer()

    async def handle_unsubscribe(self, callback: CallbackQuery):
        """–û—Ç–ø–∏—Å–∫–∞ –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏"""
        user_id = callback.from_user.id

        if self.db.unsubscribe_user(user_id):
            text = config.UNSUBSCRIBE_SUCCESS
        else:
            text = config.NOT_SUBSCRIBED

        user = self.db.get_user(user_id)
        keyboard = self.get_main_keyboard(user.is_subscribed if user else False)

        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer()

    async def handle_admin_menu(self, callback: CallbackQuery):
        """–í–æ–∑–≤—Ä–∞—Ç –≤ –∞–¥–º–∏–Ω –º–µ–Ω—é"""
        stats = self.db.get_statistics()
        admin_text = f"""
üëë **–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å**

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}
‚Ä¢ –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {stats['subscribed_users']}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤: {stats['active_codes']}
‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤: {stats['total_codes']}
‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {stats['sent_messages']}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
        """

        keyboard = self.get_admin_keyboard()
        await callback.message.edit_text(admin_text, reply_markup=keyboard)
        await callback.answer()

    # –ê–¥–º–∏–Ω —Ñ—É–Ω–∫—Ü–∏–∏ - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞
    async def handle_add_promo(self, callback: CallbackQuery, state: FSMContext):
        """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
        await state.set_state(AdminStates.waiting_for_promo_code)

        text = """
‚ûï **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞**

–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ (—Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã):
        """

        keyboard = self.get_back_keyboard()
        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer()

    async def process_promo_code(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
        code = message.text.strip().upper()

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
        if not code.isalnum() or len(code) > 50:
            await message.answer("‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã (–º–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤)")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(promo_code=code)
        await state.set_state(AdminStates.waiting_for_promo_description)

        await message.answer(f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥: `{code}`\n\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞:")

    async def process_promo_description(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
        description = message.text.strip()

        if len(description) > 500:
            await message.answer("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤)")
            return

        await state.update_data(description=description)
        await state.set_state(AdminStates.waiting_for_promo_expiry)

        text = """
‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.

–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
`–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú` (–ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏)

–ù–∞–ø—Ä–∏–º–µ—Ä: `31.12.2024 23:59`

–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ `-` –µ—Å–ª–∏ —Å—Ä–æ–∫ –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω.
        """

        await message.answer(text)

    async def process_promo_expiry(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –∏—Å—Ç–µ—á–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
        expiry_text = message.text.strip()
        expiry_date = None

        if expiry_text != "-":
            try:
                # –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã
                expiry_date = datetime.strptime(expiry_text, "%d.%m.%Y %H:%M")
                expiry_date = self.timezone.localize(expiry_date)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –≤ –±—É–¥—É—â–µ–º
                if expiry_date <= datetime.now(self.timezone):
                    await message.answer("‚ùå –î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º")
                    return

            except ValueError:
                await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú")
                return

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        promo_code = data['promo_code']
        description = data['description']

        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥ –≤ –ë–î
        promo = self.db.add_promo_code(promo_code, description, expiry_date)

        if not promo:
            await message.answer(f"‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ `{promo_code}` —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            await state.clear()
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
        sent_count = await self.broadcast_promo_code(promo)

        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å—Ç–µ—á–µ–Ω–∏–µ
        if expiry_date:
            await self.scheduler.schedule_promo_expiry(promo)

        success_text = f"""
‚úÖ **–ü—Ä–æ–º–æ–∫–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω –∏ —Ä–∞–∑–æ—Å–ª–∞–Ω!**

üîë –ö–æ–¥: `{promo_code}`
üìã –û–ø–∏—Å–∞–Ω–∏–µ: {description}
‚è≥ –ò—Å—Ç–µ–∫–∞–µ—Ç: {expiry_date.strftime("%d.%m.%Y %H:%M –ú–°–ö") if expiry_date else "–ù–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ"}
üì§ –†–∞–∑–æ—Å–ª–∞–Ω–æ: {sent_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        """

        keyboard = self.get_admin_keyboard()
        await message.answer(success_text, reply_markup=keyboard)
        await state.clear()

    # –§—É–Ω–∫—Ü–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏
    async def broadcast_promo_code(self, promo: PromoCode) -> int:
        """–†–∞—Å—Å—ã–ª–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º"""
        subscribers = self.db.get_subscribed_users()
        sent_count = 0

        if not subscribers:
            logger.info("–ù–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
            return 0

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        promo_text = config.PROMO_TEMPLATE.format(
            code=promo.code,
            description=promo.description,
            expiry_date=promo.expiry_date.strftime("%d.%m.%Y %H:%M –ú–°–ö") if promo.expiry_date else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        )

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = self.get_promo_keyboard(promo.code)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
        for user in subscribers:
            try:
                sent_message = await self.bot.send_message(
                    chat_id=user.user_id,
                    text=promo_text,
                    reply_markup=keyboard
                )

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
                self.db.add_sent_message(
                    user_id=user.user_id,
                    promo_code_id=promo.id,
                    message_id=sent_message.message_id,
                    chat_id=user.user_id
                )

                sent_count += 1

                # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ API
                await asyncio.sleep(config.BROADCAST_DELAY)

            except TelegramForbiddenError:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ - –æ—Ç–ø–∏—Å—ã–≤–∞–µ–º –µ–≥–æ
                self.db.unsubscribe_user(user.user_id)
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞")

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.user_id}: {e}")

        logger.info(f"–ü—Ä–æ–º–æ–∫–æ–¥ {promo.code} —Ä–∞–∑–æ—Å–ª–∞–Ω {sent_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
        return sent_count

    async def handle_view_codes(self, callback: CallbackQuery):
        """–ü—Ä–æ—Å–º–æ—Ç—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤"""
        active_codes = self.db.get_active_promo_codes()

        if not active_codes:
            text = "üìã **–ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã**\n\n‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤"
            keyboard = self.get_back_keyboard()
        else:
            text = "üìã **–ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã**\n\n"
            builder = InlineKeyboardBuilder()

            for i, promo in enumerate(active_codes[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10
                expiry_str = promo.expiry_date.strftime("%d.%m.%Y %H:%M") if promo.expiry_date else "‚àû"
                text += f"{i}. `{promo.code}`\n"
                text += f"   üìã {promo.description}\n"
                text += f"   ‚è≥ –ò—Å—Ç–µ–∫–∞–µ—Ç: {expiry_str}\n"
                text += f"   üì§ –†–∞–∑–æ—Å–ª–∞–Ω–æ: {promo.sent_count}\n\n"

                builder.button(
                    text=f"‚ùå –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å {promo.code}",
                    callback_data=f"deactivate_{promo.id}"
                )

            builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin")
            builder.adjust(1)
            keyboard = builder.as_markup()

        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer()

    async def handle_deactivate_code(self, callback: CallbackQuery):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
        promo_id = int(callback.data.split("_")[1])
        promo = self.db.get_promo_code(promo_id)

        if not promo or not promo.is_active:
            await callback.answer("‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
            return

        text = f"""
‚ùì **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏**

–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥?

üîë –ö–æ–¥: `{promo.code}`
üìã –û–ø–∏—Å–∞–Ω–∏–µ: {promo.description}
üì§ –†–∞–∑–æ—Å–ª–∞–Ω–æ: {promo.sent_count}

‚ö†Ô∏è –í—Å–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –æ–±–Ω–æ–≤–ª–µ–Ω—ã —Å –ø–æ–º–µ—Ç–∫–æ–π "–ü—Ä–æ–º–æ–∫–æ–¥ –∏—Å—Ç–µ–∫"
        """

        builder = InlineKeyboardBuilder()
        builder.button(text="‚úÖ –î–∞, –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"confirm_deactivate_{promo_id}")
        builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="view_codes")
        builder.adjust(1)

        await callback.message.edit_text(text, reply_markup=builder.as_markup())
        await callback.answer()

    async def handle_confirm_deactivate(self, callback: CallbackQuery):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–∞—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
        promo_id = int(callback.data.split("_")[2])

        success = await self.scheduler.manually_expire_code(promo_id)

        if success:
            text = "‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∏ –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã"
        else:
            text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞"

        await callback.answer(text, show_alert=True)

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∫–æ–¥–æ–≤
        await self.handle_view_codes(callback)

    async def handle_statistics(self, callback: CallbackQuery):
        """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        stats = self.db.get_statistics()

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        recent_users_text = ""
        for user_info in stats['recent_users']:
            name = user_info[1] or f"ID: {user_info[0]}"
            date = datetime.fromisoformat(user_info[2]).strftime("%d.%m.%Y")
            recent_users_text += f"‚Ä¢ {name} ({date})\n"

        if not recent_users_text:
            recent_users_text = "‚Ä¢ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"

        text = f"""
üìä **–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**

üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**
‚Ä¢ –í—Å–µ–≥–æ: {stats['total_users']}
‚Ä¢ –ü–æ–¥–ø–∏—Å—á–∏–∫–∏: {stats['subscribed_users']}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {stats['subscribed_users']/max(stats['total_users'], 1)*100:.1f}%

üéÅ **–ü—Ä–æ–º–æ–∫–æ–¥—ã:**
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ: {stats['active_codes']}
‚Ä¢ –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ: {stats['total_codes']}
‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {stats['sent_messages']}

üë§ **–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**
{recent_users_text}

üìÖ **–û–±–Ω–æ–≤–ª–µ–Ω–æ:** {datetime.now(self.timezone).strftime("%d.%m.%Y %H:%M –ú–°–ö")}
        """

        keyboard = self.get_back_keyboard()
        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer()

    async def handle_broadcast_ad(self, callback: CallbackQuery, state: FSMContext):
        """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        await state.set_state(AdminStates.waiting_for_ad_title)

        text = """
üì¢ **–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è**

–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:
        """

        keyboard = self.get_back_keyboard()
        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer()

    async def process_ad_title(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Ä–µ–∫–ª–∞–º—ã"""
        title = message.text.strip()

        if len(title) > 100:
            await message.answer("‚ùå –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤)")
            return

        await state.update_data(ad_title=title)
        await state.set_state(AdminStates.waiting_for_ad_content)

        await message.answer(f"‚úÖ –ó–∞–≥–æ–ª–æ–≤–æ–∫: `{title}`\n\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:")

    async def process_ad_content(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ä–µ–∫–ª–∞–º—ã"""
        content = message.text.strip()

        if len(content) > 2000:
            await message.answer("‚ùå –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 2000 —Å–∏–º–≤–æ–ª–æ–≤)")
            return

        data = await state.get_data()
        title = data['ad_title']

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∫–ª–∞–º—É
        sent_count = await self.broadcast_advertisement(title, content)

        success_text = f"""
‚úÖ **–†–µ–∫–ª–∞–º–∞ —Ä–∞–∑–æ—Å–ª–∞–Ω–∞!**

üì¢ –ó–∞–≥–æ–ª–æ–≤–æ–∫: {title}
üìù –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {content[:100]}{"..." if len(content) > 100 else ""}
üì§ –†–∞–∑–æ—Å–ª–∞–Ω–æ: {sent_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        """

        keyboard = self.get_admin_keyboard()
        await message.answer(success_text, reply_markup=keyboard)
        await state.clear()

    async def broadcast_advertisement(self, title: str, content: str) -> int:
        """–†–∞—Å—Å—ã–ª–∫–∞ —Ä–µ–∫–ª–∞–º—ã –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º"""
        subscribers = self.db.get_subscribed_users()
        sent_count = 0

        if not subscribers:
            return 0

        ad_text = f"üì¢ **{title}**\n\n{content}"

        for user in subscribers:
            try:
                await self.bot.send_message(
                    chat_id=user.user_id,
                    text=ad_text
                )
                sent_count += 1
                await asyncio.sleep(config.BROADCAST_DELAY)

            except TelegramForbiddenError:
                self.db.unsubscribe_user(user.user_id)

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∫–ª–∞–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.user_id}: {e}")

        logger.info(f"–†–µ–∫–ª–∞–º–∞ —Ä–∞–∑–æ—Å–ª–∞–Ω–∞ {sent_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
        return sent_count

    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    async def handle_db_management(self, callback: CallbackQuery):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
        stats = self.db.get_statistics()

        text = f"""
üóÉÔ∏è **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö**

üìä **–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:**
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {stats['total_users']}
‚Ä¢ –ü—Ä–æ–º–æ–∫–æ–¥—ã: {stats['total_codes']}
‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏—è: {stats['sent_messages']}

‚ö†Ô∏è **–û—Å—Ç–æ—Ä–æ–∂–Ω–æ!** –û–ø–µ—Ä–∞—Ü–∏–∏ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –Ω–µ–æ–±—Ä–∞—Ç–∏–º—ã.
        """

        builder = InlineKeyboardBuilder()
        builder.button(text="üóëÔ∏è –°–ë–†–û–° –ë–ê–ó–´ –î–ê–ù–ù–´–•", callback_data="reset_db")
        builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin")
        builder.adjust(1)

        await callback.message.edit_text(text, reply_markup=builder.as_markup())
        await callback.answer()

    async def handle_reset_db(self, callback: CallbackQuery, state: FSMContext):
        """–ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º FSM –≤–º–µ—Å—Ç–æ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ callback"""
        await state.set_state(AdminStates.waiting_for_db_reset_confirm)

        text = """
‚ö†Ô∏è **–í–ù–ò–ú–ê–ù–ò–ï! –û–ü–ê–°–ù–ê–Ø –û–ü–ï–†–ê–¶–ò–Ø!**

–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —É–¥–∞–ª–∏—Ç:
‚Ä¢ –í—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ –í—Å–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã  
‚Ä¢ –í—Å—é –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
‚Ä¢ –í—Å—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É

–î–∞–Ω–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è **–ù–ï–û–ë–†–ê–¢–ò–ú–ê!**

–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ: `–ü–û–î–¢–í–ï–†–î–ò–¢–¨ –°–ë–†–û–°`
–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π —Ç–µ–∫—Å—Ç.
        """

        await callback.message.edit_text(text)
        await callback.answer()

    async def process_db_reset_confirm(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–±—Ä–æ—Å–∞ –ë–î"""
        confirmation = message.text.strip()

        if confirmation == "–ü–û–î–¢–í–ï–†–î–ò–¢–¨ –°–ë–†–û–°":
            success = self.db.reset_database()

            if success:
                text = "‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞!"
            else:
                text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"
        else:
            text = "‚ùå –°–±—Ä–æ—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –æ—Ç–º–µ–Ω–µ–Ω"

        keyboard = self.get_admin_keyboard()
        await message.answer(text, reply_markup=keyboard)
        await state.clear()

    async def handle_back_to_admin(self, callback: CallbackQuery, state: FSMContext):
        """–í–æ–∑–≤—Ä–∞—Ç –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"""
        await state.clear()
        await self.handle_admin_menu(callback)

    async def handle_redeem_promo(self, callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
        promo_code = callback.data.split("_", 1)[1]
        await callback.answer(f"–ü—Ä–æ–º–æ–∫–æ–¥ {promo_code} —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!", show_alert=True)

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    async def start_bot(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")

            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
            scheduler_task = asyncio.create_task(self.scheduler.start())

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ –æ –∑–∞–ø—É—Å–∫–µ
            for admin_id in config.ADMIN_IDS:
                try:
                    await self.bot.send_message(
                        admin_id, 
                        f"ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!\n\n‚è∞ {datetime.now(self.timezone).strftime('%d.%m.%Y %H:%M –ú–°–ö')}"
                    )
                except:
                    pass

            logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")

            # –ó–∞–ø—É—Å–∫–∞–µ–º polling
            await self.dp.start_polling(self.bot)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        finally:
            await self.scheduler.stop()

    async def stop_bot(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
        await self.scheduler.stop()
        await self.bot.session.close()

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    if config.BOT_TOKEN == "YOUR_BOT_TOKEN_HERE":
        logger.error("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return

    if config.ADMIN_IDS == [123456789]:
        logger.error("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ADMIN_IDS –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return

    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    bot = GenshinPromoBot()

    try:
        await bot.start_bot()
    except KeyboardInterrupt:
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        await bot.stop_bot()

if __name__ == "__main__":
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø–æ–ª–∏—Ç–∏–∫—É event loop –¥–ª—è Windows
    if sys.platform == "win32":
        asyncio.set_event_loop_policy(asyncio.WindowsProactorEventLoopPolicy())

    asyncio.run(main())