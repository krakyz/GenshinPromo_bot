"""
–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å —Ç–∞–π–º–µ—Ä–∞–º–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –∏—Å—Ç–µ–∫—à–∏—Ö –∫–æ–¥–æ–≤
"""
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from typing import List, Tuple, Optional
from models import CodeModel


class KeyboardBuilder:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å—Ç—Ä–æ–∏—Ç–µ–ª—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä"""
    
    @staticmethod
    def create_keyboard(
        buttons: List[List[Tuple[str, str]]],
        back_button: bool = False,
        refresh_button: Optional[str] = None
    ) -> InlineKeyboardMarkup:
        """
        –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–Ω–æ–ø–æ–∫
        
        Args:
            buttons: List[List[Tuple[text, callback_data]]]
            back_button: –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
            refresh_button: callback_data –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        """
        keyboard = []
        
        for row in buttons:
            keyboard_row = []
            for text, callback_data in row:
                keyboard_row.append(InlineKeyboardButton(text=text, callback_data=callback_data))
            keyboard.append(keyboard_row)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞
        if refresh_button:
            keyboard.append([InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=refresh_button)])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –µ—Å–ª–∏ –Ω—É–∂–Ω–∞
        if back_button:
            keyboard.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")])
        
        return InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    @staticmethod
    def create_url_keyboard(
        buttons: List[Tuple[str, str]],
        additional_buttons: Optional[List[List[Tuple[str, str]]]] = None
    ) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å URL –∫–Ω–æ–ø–∫–∞–º–∏"""
        keyboard = []
        
        for text, url in buttons:
            keyboard.append([InlineKeyboardButton(text=text, url=url)])
        
        if additional_buttons:
            for row in additional_buttons:
                keyboard_row = []
                for text, callback_data in row:
                    keyboard_row.append(InlineKeyboardButton(text=text, callback_data=callback_data))
                keyboard.append(keyboard_row)
        
        return InlineKeyboardMarkup(inline_keyboard=keyboard)


# –§–∞–±—Ä–∏–∫–∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä
def get_code_activation_keyboard(code: str, is_expired: bool = False) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ-–∫–æ–¥–∞ –∏–ª–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Å—Ç–µ–∫—à–µ–≥–æ"""
    if is_expired:
        return KeyboardBuilder.create_keyboard(
            buttons=[[(f"‚ùå –ö–æ–¥ –∏—Å—Ç–µ–∫: {code}", "expired_code")]],
            additional_buttons=[[("üìã –í—Å–µ –∫–æ–¥—ã", "view_all_codes")]]
        )
    
    activation_url = f"https://genshin.hoyoverse.com/gift?code={code}"
    return KeyboardBuilder.create_url_keyboard(
        buttons=[(f"üéÅ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥: {code}", activation_url)],
        additional_buttons=[[("üìã –í—Å–µ –∫–æ–¥—ã", "view_all_codes")]]
    )


def get_all_codes_keyboard(codes: List[CodeModel]) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ –≤—Å–µ–º–∏ –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∫–æ–¥–∞–º–∏"""
    url_buttons = []
    for code in codes:
        if code.is_active:
            activation_url = f"https://genshin.hoyoverse.com/gift?code={code.code}"
            url_buttons.append((f"üéÅ {code.code}", activation_url))
    
    return KeyboardBuilder.create_url_keyboard(buttons=url_buttons)


def get_subscription_keyboard(is_subscribed: bool = False) -> InlineKeyboardMarkup:
    """–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥–ø–∏—Å–∫–∏"""
    buttons = []
    
    if not is_subscribed:
        buttons.append([("üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", "subscribe")])
    
    buttons.append([("üìã –í—Å–µ –∫–æ–¥—ã", "view_all_codes")])
    
    return KeyboardBuilder.create_keyboard(buttons=buttons)


# –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_admin_keyboard() -> InlineKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    return KeyboardBuilder.create_keyboard(buttons=[
        [("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–æ–¥", "admin_add_code"), ("‚ùå –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥", "admin_expire_code")],
        [("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "admin_stats"), ("üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–¥—ã", "admin_active_codes")],
        [("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", "admin_users"), ("üì¢ –†–µ–∫–ª–∞–º–∞", "admin_custom_post")],
        [("üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", "admin_database")]
    ])


def get_admin_stats_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–ë–ï–ó —Å–ø–∏—Å–∫–∞ –∫–æ–¥–æ–≤)"""
    return KeyboardBuilder.create_keyboard(
        buttons=[],
        back_button=True,
        refresh_button="admin_stats"
    )


def get_admin_codes_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–¥–æ–≤"""
    return KeyboardBuilder.create_keyboard(
        buttons=[],
        back_button=True,
        refresh_button="admin_active_codes"
    )


def get_admin_users_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    return KeyboardBuilder.create_keyboard(
        buttons=[],
        back_button=True,
        refresh_button="admin_users"
    )


def get_database_admin_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    return KeyboardBuilder.create_keyboard(
        buttons=[
            [("üì• –°–∫–∞—á–∞—Ç—å –ë–î", "admin_download_db"), ("üóëÔ∏è –°–±—Ä–æ—Å–∏—Ç—å –ë–î", "admin_reset_db")]
        ],
        back_button=True
    )


def get_admin_back_keyboard() -> InlineKeyboardMarkup:
    """–ü—Ä–æ—Å—Ç–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ç–æ–ª—å–∫–æ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥" """
    return KeyboardBuilder.create_keyboard(buttons=[], back_button=True)


# –ù–æ–≤—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–æ–¥–æ–≤ —Å —Ç–∞–π–º–µ—Ä–æ–º
def get_admin_expire_codes_keyboard(codes: List[CodeModel]) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∫–æ–¥–æ–≤ –¥–ª—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏"""
    buttons = []
    
    for code in codes:
        buttons.append([(f"üî• {code.code}", f"expire_code_{code.code}")])
    
    return KeyboardBuilder.create_keyboard(buttons=buttons, back_button=True)


def get_expire_code_timer_keyboard(code: str, seconds_left: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —Ç–∞–π–º–µ—Ä–æ–º –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏"""
    if seconds_left > 0:
        button_text = f"‚è≥ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ {seconds_left} —Å–µ–∫"
        callback_data = f"timer_{code}_{seconds_left-1}"
    else:
        button_text = f"‚ùå –î–ï–ê–ö–¢–ò–í–ò–†–û–í–ê–¢–¨ {code}"
        callback_data = f"confirm_expire_{code}"
    
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=button_text, callback_data=callback_data)],
        [InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="admin_expire_code")]
    ])


# –ù–æ–≤—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Å–±—Ä–æ—Å–∞ –ë–î —Å —Ç–∞–π–º–µ—Ä–æ–º
def get_reset_db_timer_keyboard(seconds_left: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —Ç–∞–π–º–µ—Ä–æ–º –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–±—Ä–æ—Å–∞ –ë–î"""
    if seconds_left > 0:
        button_text = f"‚è≥ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ {seconds_left} —Å–µ–∫"
        callback_data = f"reset_timer_{seconds_left-1}"
    else:
        button_text = "üóëÔ∏è –°–ë–†–û–°–ò–¢–¨ –ë–ê–ó–£ –î–ê–ù–ù–´–•"
        callback_data = "confirm_reset_db"
    
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=button_text, callback_data=callback_data)],
        [InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="admin_database")]
    ])


# –ê–ª–∏–∞—Å—ã –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
get_admin_add_code_keyboard = get_admin_back_keyboard
get_admin_expire_code_keyboard = get_admin_back_keyboard
get_admin_custom_post_keyboard = get_admin_back_keyboard


def get_custom_post_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ (—Ç–æ–ª—å–∫–æ –ø—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–¥–æ–≤)"""
    return KeyboardBuilder.create_keyboard(
        buttons=[[("üìã –í—Å–µ –∫–æ–¥—ã", "view_all_codes")]]
    )


def get_custom_post_with_button_keyboard(button_text: str, button_url: str) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π"""
    return KeyboardBuilder.create_url_keyboard(
        buttons=[(button_text, button_url)],
        additional_buttons=[[("üìã –í—Å–µ –∫–æ–¥—ã", "view_all_codes")]]
    )