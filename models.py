"""
–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é
"""
from dataclasses import dataclass, field
from datetime import datetime
from typing import Optional, List, Dict, Any
import json


@dataclass
class UserModel:
    """–ú–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏"""
    user_id: int
    username: Optional[str] = None
    first_name: Optional[str] = None
    last_name: Optional[str] = None
    language_code: Optional[str] = 'ru'
    is_subscribed: bool = True
    joined_at: Optional[datetime] = field(default_factory=datetime.now)
    last_activity: Optional[datetime] = field(default_factory=datetime.now)
    
    def __post_init__(self):
        """–ü–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
        # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –∏–º–µ–Ω–∞
        if self.first_name and len(self.first_name) > 64:
            self.first_name = self.first_name[:64]
        if self.last_name and len(self.last_name) > 64:
            self.last_name = self.last_name[:64]
        if self.username and len(self.username) > 32:
            self.username = self.username[:32]
    
    @property
    def display_name(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        if self.first_name:
            return self.first_name
        elif self.username:
            return f"@{self.username}"
        else:
            return f"User {self.user_id}"
    
    @property
    def full_name(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω–æ–µ –∏–º—è"""
        parts = []
        if self.first_name:
            parts.append(self.first_name)
        if self.last_name:
            parts.append(self.last_name)
        
        return " ".join(parts) if parts else self.display_name
    
    def to_dict(self) -> Dict[str, Any]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –º–æ–¥–µ–ª—å –≤ —Å–ª–æ–≤–∞—Ä—å"""
        return {
            'user_id': self.user_id,
            'username': self.username,
            'first_name': self.first_name,
            'last_name': self.last_name,
            'language_code': self.language_code,
            'is_subscribed': self.is_subscribed,
            'joined_at': self.joined_at.isoformat() if self.joined_at else None,
            'last_activity': self.last_activity.isoformat() if self.last_activity else None
        }


@dataclass
class CodeModel:
    """–ú–æ–¥–µ–ª—å –ø—Ä–æ–º–æ-–∫–æ–¥–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏"""
    code: str
    description: Optional[str] = None
    rewards: Optional[str] = None
    expires_date: Optional[datetime] = None
    created_at: Optional[datetime] = field(default_factory=datetime.now)
    is_active: bool = True
    id: Optional[int] = None
    usage_count: int = 0
    max_uses: Optional[int] = None
    
    def __post_init__(self):
        """–ü–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
        # –ü—Ä–∏–≤–æ–¥–∏–º –∫–æ–¥ –∫ –≤–µ—Ä—Ö–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
        self.code = self.code.upper().strip()
        
        # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
        if self.description and len(self.description) > 500:
            self.description = self.description[:500]
        if self.rewards and len(self.rewards) > 500:
            self.rewards = self.rewards[:500]
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–¥–∞
        if not self.code or len(self.code) < 3:
            raise ValueError("–ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞")
        
        if len(self.code) > 20:
            raise ValueError("–ö–æ–¥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–ª–∏–Ω–Ω–µ–µ 20 —Å–∏–º–≤–æ–ª–æ–≤")
    
    @property
    def is_expired(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏—Å—Ç–µ–∫ –ª–∏ –∫–æ–¥"""
        if not self.expires_date:
            return False
        
        from utils.date_utils import DateTimeUtils
        return DateTimeUtils.is_code_expired(self.expires_date)
    
    @property
    def time_left(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è"""
        if not self.expires_date:
            return None
        
        from utils.date_utils import DateTimeUtils
        return DateTimeUtils.time_until_expiry(self.expires_date)
    
    @property
    def formatted_expiry(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –¥–∞—Ç—É –∏—Å—Ç–µ—á–µ–Ω–∏—è"""
        if not self.expires_date:
            return "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        
        from utils.date_utils import DateTimeUtils
        return DateTimeUtils.format_expiry_date(self.expires_date)
    
    @property
    def activation_url(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç URL –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–æ–¥–∞"""
        return f"https://genshin.hoyoverse.com/gift?code={self.code}"
    
    def is_usage_limited(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞"""
        return self.max_uses is not None and self.usage_count >= self.max_uses
    
    def can_be_used(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–¥"""
        return (
            self.is_active and
            not self.is_expired and
            not self.is_usage_limited()
        )
    
    def to_dict(self) -> Dict[str, Any]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –º–æ–¥–µ–ª—å –≤ —Å–ª–æ–≤–∞—Ä—å"""
        return {
            'id': self.id,
            'code': self.code,
            'description': self.description,
            'rewards': self.rewards,
            'expires_date': self.expires_date.isoformat() if self.expires_date else None,
            'created_at': self.created_at.isoformat() if self.created_at else None,
            'is_active': self.is_active,
            'usage_count': self.usage_count,
            'max_uses': self.max_uses,
            'is_expired': self.is_expired,
            'activation_url': self.activation_url
        }
    
    def to_user_text(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        text = f"üî• **{self.code}**\n"
        
        if self.description:
            text += f"üìù {self.description}\n"
        
        if self.rewards:
            text += f"üíé {self.rewards}\n"
        
        if self.expires_date:
            text += f"‚è∞ –î–æ: {self.formatted_expiry}\n"
        
        return text


@dataclass
class MessageModel:
    """–ú–æ–¥–µ–ª—å —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ–¥–æ–º"""
    id: Optional[int] = None
    code_id: int = None
    user_id: int = None
    message_id: int = None
    created_at: Optional[datetime] = field(default_factory=datetime.now)
    is_active: bool = True
    
    def to_dict(self) -> Dict[str, Any]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –º–æ–¥–µ–ª—å –≤ —Å–ª–æ–≤–∞—Ä—å"""
        return {
            'id': self.id,
            'code_id': self.code_id,
            'user_id': self.user_id,
            'message_id': self.message_id,
            'created_at': self.created_at.isoformat() if self.created_at else None,
            'is_active': self.is_active
        }


@dataclass
class BroadcastStats:
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    total_users: int = 0
    sent_count: int = 0
    failed_count: int = 0
    blocked_count: int = 0
    start_time: Optional[datetime] = field(default_factory=datetime.now)
    end_time: Optional[datetime] = None
    
    @property
    def success_rate(self) -> float:
        """–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ–π –¥–æ—Å—Ç–∞–≤–∫–∏"""
        if self.total_users == 0:
            return 0.0
        return (self.sent_count / self.total_users) * 100
    
    @property
    def duration(self) -> Optional[float]:
        """–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö"""
        if not self.end_time or not self.start_time:
            return None
        return (self.end_time - self.start_time).total_seconds()
    
    def finish(self):
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –ø–æ–¥—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞—Å—Å—ã–ª–∫–∏"""
        self.end_time = datetime.now()
    
    def to_dict(self) -> Dict[str, Any]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —Å–ª–æ–≤–∞—Ä—å"""
        return {
            'total_users': self.total_users,
            'sent_count': self.sent_count,
            'failed_count': self.failed_count,
            'blocked_count': self.blocked_count,
            'success_rate': self.success_rate,
            'duration': self.duration,
            'start_time': self.start_time.isoformat() if self.start_time else None,
            'end_time': self.end_time.isoformat() if self.end_time else None
        }
    
    def to_report_text(self) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞"""
        text = f"""üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏**

üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {self.total_users}
‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {self.sent_count}
‚ùå –û—à–∏–±–æ–∫: {self.failed_count}
üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: {self.blocked_count}

üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {self.success_rate:.1f}%"""

        if self.duration:
            text += f"\n‚è±Ô∏è –í—Ä–µ–º—è: {self.duration:.1f} —Å–µ–∫"

        return text


# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
class ModelConstants:
    """–ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –º–æ–¥–µ–ª–µ–π"""
    
    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    MAX_USERNAME_LENGTH = 32
    MAX_NAME_LENGTH = 64
    
    # –ü—Ä–æ–º–æ-–∫–æ–¥
    MIN_CODE_LENGTH = 3
    MAX_CODE_LENGTH = 20
    MAX_DESCRIPTION_LENGTH = 500
    MAX_REWARDS_LENGTH = 500
    
    # –û–±—â–∏–µ
    MAX_MESSAGE_LENGTH = 4096  # –õ–∏–º–∏—Ç Telegram –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π


# –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def validate_code_format(code: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–º–æ-–∫–æ–¥–∞"""
    if not code:
        return False
    
    code = code.strip().upper()
    
    # –î–ª–∏–Ω–∞
    if len(code) < ModelConstants.MIN_CODE_LENGTH or len(code) > ModelConstants.MAX_CODE_LENGTH:
        return False
    
    # –¢–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã
    if not code.isalnum():
        return False
    
    return True


def sanitize_text(text: Optional[str], max_length: int = 500) -> Optional[str]:
    """–û—á–∏—â–∞–µ—Ç –∏ –æ–±—Ä–µ–∑–∞–µ—Ç —Ç–µ–∫—Å—Ç"""
    if not text:
        return None
    
    # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    text = " ".join(text.split())
    
    # –û–±—Ä–µ–∑–∞–µ–º –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã
    if len(text) > max_length:
        text = text[:max_length].rstrip()
    
    return text if text else None